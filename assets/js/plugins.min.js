!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";function l(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this}var c="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,X="undefined"==typeof window?{document:c,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window;function E(e,t){var i=[],a=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var s,n,r=e.trim();if(0<=r.indexOf("<")&&0<=r.indexOf(">")){var o="div";for(0===r.indexOf("<li")&&(o="ul"),0===r.indexOf("<tr")&&(o="tbody"),0!==r.indexOf("<td")&&0!==r.indexOf("<th")||(o="tr"),0===r.indexOf("<tbody")&&(o="table"),0===r.indexOf("<option")&&(o="select"),(n=c.createElement(o)).innerHTML=r,a=0;a<n.childNodes.length;a+=1)i.push(n.childNodes[a])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||c).querySelectorAll(e.trim()):[c.getElementById(e.trim().split("#")[1])],a=0;a<s.length;a+=1)s[a]&&i.push(s[a])}else if(e.nodeType||e===X||e===c)i.push(e);else if(0<e.length&&e[0].nodeType)for(a=0;a<e.length;a+=1)i.push(e[a]);return new l(i)}function n(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}E.fn=l.prototype,E.Class=l,E.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var a=0;a<this.length;a+=1)void 0!==this[a]&&void 0!==this[a].classList&&this[a].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var a=0;a<this.length;a+=1)void 0!==this[a]&&void 0!==this[a].classList&&this[a].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var a=0;a<this.length;a+=1)void 0!==this[a]&&void 0!==this[a].classList&&this[a].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var a=0;a<this.length;a+=1)if(2===i.length)this[a].setAttribute(e,t);else for(var s in e)this[a][s]=e[s],this[a].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var a=0;a<this.length;a+=1)(i=this[a]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0]){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];var s=i.getAttribute("data-"+e);return s?s:void 0}},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],n=e[1],r=e[2],a=e[3];function s(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),E(t).is(n))r.apply(t,i);else for(var a=E(t).parents(),s=0;s<a.length;s+=1)E(a[s]).is(n)&&r.apply(a[s],i)}}function o(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof e[1]&&(i=e[0],r=e[1],a=e[2],n=void 0);for(var l,a=a||!1,d=i.split(" "),u=0;u<this.length;u+=1){var c=this[u];if(n)for(l=0;l<d.length;l+=1){var p=d[l];c.dom7LiveListeners||(c.dom7LiveListeners={}),c.dom7LiveListeners[p]||(c.dom7LiveListeners[p]=[]),c.dom7LiveListeners[p].push({listener:r,proxyListener:s}),c.addEventListener(p,s,a)}else for(l=0;l<d.length;l+=1){var h=d[l];c.dom7Listeners||(c.dom7Listeners={}),c.dom7Listeners[h]||(c.dom7Listeners[h]=[]),c.dom7Listeners[h].push({listener:r,proxyListener:o}),c.addEventListener(h,o,a)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],a=e[1],s=e[2],n=e[3];"function"==typeof e[1]&&(i=e[0],s=e[1],n=e[2],a=void 0);for(var n=n||!1,r=i.split(" "),o=0;o<r.length;o+=1)for(var l=r[o],d=0;d<this.length;d+=1){var u=this[d],c=void 0;if(!a&&u.dom7Listeners?c=u.dom7Listeners[l]:a&&u.dom7LiveListeners&&(c=u.dom7LiveListeners[l]),c&&c.length)for(var p=c.length-1;0<=p;--p){var h=c[p];(!s||h.listener!==s)&&!(s&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===s)&&s||(u.removeEventListener(l,h.proxyListener,n),c.splice(p,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=e[0].split(" "),a=e[1],s=0;s<i.length;s+=1)for(var n=i[s],r=0;r<this.length;r+=1){var o=this[r],l=void 0;try{l=new X.CustomEvent(n,{detail:a,bubbles:!0,cancelable:!0})}catch(e){(l=c.createEvent("Event")).initEvent(n,!0,!0),l.detail=a}o.dom7EventData=e.filter(function(e,t){return 0<t}),o.dispatchEvent(l),o.dom7EventData=[],delete o.dom7EventData}return this},transitionEnd:function(t){var i,a=["webkitTransitionEnd","transitionend"],s=this;function n(e){if(e.target===this)for(t.call(this,e),i=0;i<a.length;i+=1)s.off(a[i],n)}if(t)for(i=0;i<a.length;i+=1)s.on(a[i],n);return this},outerWidth:function(e){if(0<this.length){if(e){e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),i=c.body,a=e.clientTop||i.clientTop||0,s=e.clientLeft||i.clientLeft||0,i=e===X?X.scrollY:e.scrollTop,e=e===X?X.scrollX:e.scrollLeft;return{top:t.top+i-a,left:t.left+e-s}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var a in e)this[i].style[a]=e[a];return this}if(this[0])return X.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,a=this[0];if(!a||void 0===e)return!1;if("string"==typeof e){if(a.matches)return a.matches(e);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(e);if(a.msMatchesSelector)return a.msMatchesSelector(e);for(t=E(e),i=0;i<t.length;i+=1)if(t[i]===a)return!0;return!1}if(e===c)return a===c;if(e===X)return a===X;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===a)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;return t-1<e?new l([]):e<0?(t=t+e)<0?new l([]):new l([this[t]]):new l([this[e]])},append:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=0;i<e.length;i+=1)for(var a=e[i],s=0;s<this.length;s+=1)if("string"==typeof a){var n=c.createElement("div");for(n.innerHTML=a;n.firstChild;)this[s].appendChild(n.firstChild)}else if(a instanceof l)for(var r=0;r<a.length;r+=1)this[s].appendChild(a[r]);else this[s].appendChild(a);return this},prepend:function(e){for(var t,i=0;i<this.length;i+=1)if("string"==typeof e){var a=c.createElement("div");for(a.innerHTML=e,t=a.childNodes.length-1;0<=t;--t)this[i].insertBefore(a.childNodes[t],this[i].childNodes[0])}else if(e instanceof l)for(t=0;t<e.length;t+=1)this[i].insertBefore(e[t],this[i].childNodes[0]);else this[i].insertBefore(e,this[i].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&E(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){var a=i.nextElementSibling;(!e||E(a).is(e))&&t.push(a),i=a}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&E(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){var a=i.previousElementSibling;(!e||E(a).is(e))&&t.push(a),i=a}return new l(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null===this[i].parentNode||e&&!E(this[i].parentNode).is(e)||t.push(this[i].parentNode);return E(n(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var a=this[i].parentNode;a;)e&&!E(a).is(e)||t.push(a),a=a.parentNode;return E(n(t))},closest:function(e){var t=this;return void 0===e?new l([]):t.is(e)?t:t.parents(e).eq(0)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var a=this[i].querySelectorAll(e),s=0;s<a.length;s+=1)t.push(a[s]);return new l(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var a=this[i].childNodes,s=0;s<a.length;s+=1)e?1===a[s].nodeType&&E(a[s]).is(e)&&t.push(a[s]):1===a[s].nodeType&&t.push(a[s]);return new l(n(t))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=0;i<e.length;i+=1)for(var a=E(e[i]),s=0;s<a.length;s+=1)this[this.length]=a[s],this.length+=1;return this},styles:function(){return this[0]?X.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){E.fn[e]=E.fn[e]||t[e]});function e(e){var t=this;t.params=e=void 0===e?{}:e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var a,j={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var i,a,s;void 0===t&&(t="x");e=X.getComputedStyle(e,null);return X.WebKitCSSMatrix?(6<(a=e.transform||e.webkitTransform).split(",").length&&(a=a.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new X.WebKitCSSMatrix("none"===a?"":a)):i=(s=e.MozTransform||e.OTransform||e.MsTransform||e.msTransform||e.transform||e.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(a=X.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),(a="y"===t?X.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5]):a)||0},parseUrlQuery:function(e){var t,i,a,s,n={},e=e||X.location.href;if("string"==typeof e&&e.length)for(s=(i=(e=-1<e.indexOf("?")?e.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<s;t+=1)a=i[t].replace(/#\S+/g,"").split("="),n[decodeURIComponent(a[0])]=void 0===a[1]?void 0:decodeURIComponent(a[1])||"";return n},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),a=1;a<e.length;a+=1){var s=e[a];if(null!=s)for(var n=Object.keys(Object(s)),r=0,o=n.length;r<o;r+=1){var l=n[r],d=Object.getOwnPropertyDescriptor(s,l);void 0!==d&&d.enumerable&&(j.isObject(i[l])&&j.isObject(s[l])?j.extend(i[l],s[l]):!j.isObject(i[l])&&j.isObject(s[l])?(i[l]={},j.extend(i[l],s[l])):i[l]=s[l])}}return i}},F=(a=c.createElement("div"),{touch:X.Modernizr&&!0===X.Modernizr.touch||!!(0<X.navigator.maxTouchPoints||"ontouchstart"in X||X.DocumentTouch&&c instanceof X.DocumentTouch),pointerEvents:!!(X.navigator.pointerEnabled||X.PointerEvent||"maxTouchPoints"in X.navigator&&0<X.navigator.maxTouchPoints),prefixedPointerEvents:!!X.navigator.msPointerEnabled,transition:"transition"in(S=a.style)||"webkitTransition"in S||"MozTransition"in S,transforms3d:X.Modernizr&&!0===X.Modernizr.csstransforms3d||("webkitPerspective"in(S=a.style)||"MozPerspective"in S||"OPerspective"in S||"MsPerspective"in S||"perspective"in S),flexbox:function(){for(var e=a.style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<t.length;i+=1)if(t[i]in e)return!0;return!1}(),observer:"MutationObserver"in X||"WebkitMutationObserver"in X,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});X.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in X}),q={isIE:!!X.navigator.userAgent.match(/Trident/g)||!!X.navigator.userAgent.match(/MSIE/g),isEdge:!!X.navigator.userAgent.match(/Edge/g),isSafari:0<=(v=X.navigator.userAgent.toLowerCase()).indexOf("safari")&&v.indexOf("chrome")<0&&v.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(X.navigator.userAgent)},i={components:{configurable:!0}};e.prototype.on=function(e,t,i){var a=this;if("function"!=typeof t)return a;var s=i?"unshift":"push";return e.split(" ").forEach(function(e){a.eventsListeners[e]||(a.eventsListeners[e]=[]),a.eventsListeners[e][s](t)}),a},e.prototype.once=function(i,a,e){var s=this;return"function"!=typeof a?s:(n.f7proxy=a,s.on(i,n,e));function n(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];a.apply(s,e),s.off(i,n),n.f7proxy&&delete n.f7proxy}},e.prototype.off=function(e,a){var s=this;return s.eventsListeners&&e.split(" ").forEach(function(i){void 0===a?s.eventsListeners[i]=[]:s.eventsListeners[i]&&s.eventsListeners[i].length&&s.eventsListeners[i].forEach(function(e,t){(e===a||e.f7proxy&&e.f7proxy===a)&&s.eventsListeners[i].splice(t,1)})}),s},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,a,s=this;if(!s.eventsListeners)return s;var n="string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],a=e.slice(1,e.length),s):(i=e[0].events,a=e[0].data,e[0].context||s);return(Array.isArray(i)?i:i.split(" ")).forEach(function(e){var t;s.eventsListeners&&s.eventsListeners[e]&&(t=[],s.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(n,a)}))}),s},e.prototype.useModulesParams=function(t){var i=this;i.modules&&Object.keys(i.modules).forEach(function(e){e=i.modules[e];e.params&&j.extend(t,e.params)})},e.prototype.useModules=function(t){void 0===t&&(t={});var a=this;a.modules&&Object.keys(a.modules).forEach(function(e){var i=a.modules[e],e=t[e]||{};i.instance&&Object.keys(i.instance).forEach(function(e){var t=i.instance[e];a[e]="function"==typeof t?t.bind(a):t}),i.on&&a.on&&Object.keys(i.on).forEach(function(e){a.on(e,i.on[e])}),i.create&&i.create.bind(a)(e)})},i.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];var a=this;a.prototype.modules||(a.prototype.modules={});var s=t.name||Object.keys(a.prototype.modules).length+"_"+j.now();return(a.prototype.modules[s]=t).proto&&Object.keys(t.proto).forEach(function(e){a.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){a[e]=t.static[e]}),t.install&&t.install.apply(a,e),a},e.use=function(e){for(var t=[],i=arguments.length-1;0<i--;)t[i]=arguments[i+1];var a=this;return Array.isArray(e)?(e.forEach(function(e){return a.installModule(e)}),a):a.installModule.apply(a,[e].concat(t))},Object.defineProperties(e,i);var s={updateSize:function(){var e=this,t=e.$el,i=void 0!==e.params.width?e.params.width:t[0].clientWidth,a=void 0!==e.params.height?e.params.height:t[0].clientHeight;0===i&&e.isHorizontal()||0===a&&e.isVertical()||(i=i-parseInt(t.css("padding-left"),10)-parseInt(t.css("padding-right"),10),a=a-parseInt(t.css("padding-top"),10)-parseInt(t.css("padding-bottom"),10),j.extend(e,{width:i,height:a,size:e.isHorizontal()?i:a}))},updateSlides:function(){var e=this,t=e.params,i=e.$wrapperEl,a=e.size,s=e.rtlTranslate,n=e.wrongRTL,r=((m=e.virtual&&t.virtual.enabled)?e.virtual:e).slides.length,o=i.children("."+e.params.slideClass),l=(m?e.virtual.slides:o).length,d=[],u=[],c=[],p=t.slidesOffsetBefore;"function"==typeof p&&(p=t.slidesOffsetBefore.call(e));var h=t.slidesOffsetAfter;"function"==typeof h&&(h=t.slidesOffsetAfter.call(e));var f,v=e.snapGrid.length,m=e.snapGrid.length,g=t.spaceBetween,b=-p,w=0,y=0;if(void 0!==a){"string"==typeof g&&0<=g.indexOf("%")&&(g=parseFloat(g.replace("%",""))/100*a),e.virtualSize=-g,s?o.css({marginLeft:"",marginTop:""}):o.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(f=Math.floor(l/t.slidesPerColumn)===l/e.params.slidesPerColumn?l:Math.ceil(l/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(f=Math.max(f,t.slidesPerView*t.slidesPerColumn)));for(var x,T,E=t.slidesPerColumn,S=f/E,C=Math.floor(l/t.slidesPerColumn),M=0;M<l;M+=1){$=0;var k,P,z,$,O,I,_,L,D,A,H=o.eq(M);1<t.slidesPerColumn&&(z=P=k=void 0,"column"===t.slidesPerColumnFill||"row"===t.slidesPerColumnFill&&1<t.slidesPerGroup?("column"===t.slidesPerColumnFill?(z=M-(P=Math.floor(M/E))*E,(C<P||P===C&&z===E-1)&&E<=(z+=1)&&(z=0,P+=1)):(A=Math.floor(M/t.slidesPerGroup),P=M-(z=Math.floor(M/t.slidesPerView)-A*t.slidesPerColumn)*t.slidesPerView-A*t.slidesPerView),H.css({"-webkit-box-ordinal-group":k=P+z*f/E,"-moz-box-ordinal-group":k,"-ms-flex-order":k,"-webkit-order":k,order:k})):P=M-(z=Math.floor(M/S))*S,H.css("margin-"+(e.isHorizontal()?"top":"left"),0!==z&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",P).attr("data-swiper-row",z)),"none"!==H.css("display")&&("auto"===t.slidesPerView?(A=X.getComputedStyle(H[0],null),k=H[0].style.transform,P=H[0].style.webkitTransform,k&&(H[0].style.transform="none"),P&&(H[0].style.webkitTransform="none"),$=t.roundLengths?e.isHorizontal()?H.outerWidth(!0):H.outerHeight(!0):e.isHorizontal()?(O=parseFloat(A.getPropertyValue("width")),I=parseFloat(A.getPropertyValue("padding-left")),_=parseFloat(A.getPropertyValue("padding-right")),L=parseFloat(A.getPropertyValue("margin-left")),D=parseFloat(A.getPropertyValue("margin-right")),(z=A.getPropertyValue("box-sizing"))&&"border-box"===z&&!q.isIE?O+L+D:O+I+_+L+D):(O=parseFloat(A.getPropertyValue("height")),I=parseFloat(A.getPropertyValue("padding-top")),_=parseFloat(A.getPropertyValue("padding-bottom")),L=parseFloat(A.getPropertyValue("margin-top")),D=parseFloat(A.getPropertyValue("margin-bottom")),(A=A.getPropertyValue("box-sizing"))&&"border-box"===A&&!q.isIE?O+L+D:O+I+_+L+D),k&&(H[0].style.transform=k),P&&(H[0].style.webkitTransform=P),t.roundLengths&&($=Math.floor($))):($=(a-(t.slidesPerView-1)*g)/t.slidesPerView,t.roundLengths&&($=Math.floor($)),o[M]&&(e.isHorizontal()?o[M].style.width=$+"px":o[M].style.height=$+"px")),o[M]&&(o[M].swiperSlideSize=$),c.push($),t.centeredSlides?(b=b+$/2+w/2+g,0===w&&0!==M&&(b=b-a/2-g),0===M&&(b=b-a/2-g),Math.abs(b)<.001&&(b=0),t.roundLengths&&(b=Math.floor(b)),y%t.slidesPerGroup==0&&d.push(b),u.push(b)):(t.roundLengths&&(b=Math.floor(b)),y%t.slidesPerGroup==0&&d.push(b),u.push(b),b=b+$+g),e.virtualSize+=$+g,w=$,y+=1)}if(e.virtualSize=Math.max(e.virtualSize,a)+h,s&&n&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),F.flexbox&&!t.setWrapperSize||(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(e.virtualSize=($+t.spaceBetween)*f,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){for(var N=[],V=0;V<d.length;V+=1){var G=d[V];t.roundLengths&&(G=Math.floor(G)),d[V]<e.virtualSize+d[0]&&N.push(G)}d=N}if(!t.centeredSlides){N=[];for(var B=0;B<d.length;B+=1){var Y=d[B];t.roundLengths&&(Y=Math.floor(Y)),d[B]<=e.virtualSize-a&&N.push(Y)}d=N,1<Math.floor(e.virtualSize-a)-Math.floor(d[d.length-1])&&d.push(e.virtualSize-a)}0===d.length&&(d=[0]),0!==t.spaceBetween&&(e.isHorizontal()?s?o.css({marginLeft:g+"px"}):o.css({marginRight:g+"px"}):o.css({marginBottom:g+"px"})),t.centerInsufficientSlides&&(x=0,c.forEach(function(e){x+=e+(t.spaceBetween||0)}),(x-=t.spaceBetween)<a&&(T=(a-x)/2,d.forEach(function(e,t){d[t]=e-T}),u.forEach(function(e,t){u[t]=e+T}))),j.extend(e,{slides:o,snapGrid:d,slidesGrid:u,slidesSizesGrid:c}),l!==r&&e.emit("slidesLengthChange"),d.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),u.length!==m&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i,a=this,s=[],n=0;if("number"==typeof e?a.setTransition(e):!0===e&&a.setTransition(a.params.speed),"auto"!==a.params.slidesPerView&&1<a.params.slidesPerView)for(t=0;t<Math.ceil(a.params.slidesPerView);t+=1){var r=a.activeIndex+t;if(r>a.slides.length)break;s.push(a.slides.eq(r)[0])}else s.push(a.slides.eq(a.activeIndex)[0]);for(t=0;t<s.length;t+=1)void 0!==s[t]&&(n=n<(i=s[t].offsetHeight)?i:n);n&&a.$wrapperEl.css("height",n+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,a=t.slides,s=t.rtlTranslate;if(0!==a.length){void 0===a[0].swiperSlideOffset&&t.updateSlidesOffset();var n=s?e:-e;a.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var r=0;r<a.length;r+=1){var o,l,d=a[r],u=(n+(i.centeredSlides?t.minTranslate():0)-d.swiperSlideOffset)/(d.swiperSlideSize+i.spaceBetween);i.watchSlidesVisibility&&(l=(o=-(n-d.swiperSlideOffset))+t.slidesSizesGrid[r],(0<=o&&o<t.size-1||1<l&&l<=t.size||o<=0&&l>=t.size)&&(t.visibleSlides.push(d),t.visibleSlidesIndexes.push(r),a.eq(r).addClass(i.slideVisibleClass))),d.progress=s?-u:u}t.visibleSlides=E(t.visibleSlides)}},updateProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,a=t.maxTranslate()-t.minTranslate(),s=t.progress,n=t.isBeginning,r=n,o=l=t.isEnd,l=0==a?n=!(s=0):(n=(s=(e-t.minTranslate())/a)<=0,1<=s);j.extend(t,{progress:s,isBeginning:n,isEnd:l}),(i.watchSlidesProgress||i.watchSlidesVisibility)&&t.updateSlidesProgress(e),n&&!r&&t.emit("reachBeginning toEdge"),l&&!o&&t.emit("reachEnd toEdge"),(r&&!n||o&&!l)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){var e=this,t=e.slides,i=e.params,a=e.$wrapperEl,s=e.activeIndex,n=e.realIndex,r=e.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(s=r?e.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+s+'"]'):t.eq(s)).addClass(i.slideActiveClass),i.loop&&(s.hasClass(i.slideDuplicateClass)?a.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+n+'"]'):a.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+n+'"]')).addClass(i.slideDuplicateActiveClass),n=s.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass),i.loop&&0===n.length&&(n=t.eq(0)).addClass(i.slideNextClass),s=s.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass),i.loop&&0===s.length&&(s=t.eq(-1)).addClass(i.slidePrevClass),i.loop&&((n.hasClass(i.slideDuplicateClass)?a.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]'):a.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]')).addClass(i.slideDuplicateNextClass),(s.hasClass(i.slideDuplicateClass)?a.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+s.attr("data-swiper-slide-index")+'"]'):a.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+s.attr("data-swiper-slide-index")+'"]')).addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t=this,i=t.rtlTranslate?t.translate:-t.translate,a=t.slidesGrid,s=t.snapGrid,n=t.params,r=t.activeIndex,o=t.realIndex,l=t.snapIndex,d=e;if(void 0===d){for(var u=0;u<a.length;u+=1)void 0!==a[u+1]?i>=a[u]&&i<a[u+1]-(a[u+1]-a[u])/2?d=u:i>=a[u]&&i<a[u+1]&&(d=u+1):i>=a[u]&&(d=u);n.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}(n=0<=s.indexOf(i)?s.indexOf(i):Math.floor(d/n.slidesPerGroup))>=s.length&&(n=s.length-1),d!==r?(s=parseInt(t.slides.eq(d).attr("data-swiper-slide-index")||d,10),j.extend(t,{snapIndex:n,realIndex:s,previousIndex:r,activeIndex:d}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),o!==s&&t.emit("realIndexChange"),(t.initialized||t.runCallbacksOnInit)&&t.emit("slideChange")):n!==l&&(t.snapIndex=n,t.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,i=t.params,a=E(e.target).closest("."+i.slideClass)[0],s=!1;if(a)for(var n=0;n<t.slides.length;n+=1)t.slides[n]===a&&(s=!0);if(!a||!s)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=a,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(E(a).attr("data-swiper-slide-index"),10):t.clickedIndex=E(a).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var r={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,a=this.translate,s=this.$wrapperEl;return t.virtualTranslate?i?-a:a:(e=j.getTranslate(s[0],e),(e=i?-e:e)||0)},setTranslate:function(e,t){var i=this,a=i.rtlTranslate,s=i.params,n=i.$wrapperEl,r=i.progress,o=0,l=0;i.isHorizontal()?o=a?-e:e:l=e,s.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),s.virtualTranslate||(F.transforms3d?n.transform("translate3d("+o+"px, "+l+"px, 0px)"):n.transform("translate("+o+"px, "+l+"px)")),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?o:l,(0==(l=i.maxTranslate()-i.minTranslate())?0:(e-i.minTranslate())/l)!==r&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}};var o={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this,a=i.activeIndex,s=i.params,n=i.previousIndex;s.autoHeight&&i.updateAutoHeight(),t=t||(n<a?"next":a<n?"prev":"reset"),i.emit("transitionStart"),e&&a!==n&&("reset"!==t?(i.emit("slideChangeTransitionStart"),"next"===t?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")):i.emit("slideResetTransitionStart"))},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this,a=i.activeIndex,s=i.previousIndex;i.animating=!1,i.setTransition(0),t=t||(s<a?"next":a<s?"prev":"reset"),i.emit("transitionEnd"),e&&a!==s&&("reset"!==t?(i.emit("slideChangeTransitionEnd"),"next"===t?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")):i.emit("slideResetTransitionEnd"))}};var d={slideTo:function(e,t,i,a){void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var s=this,n=e=void 0===e?0:e;n<0&&(n=0);var r=s.params,o=s.snapGrid,l=s.slidesGrid,d=s.previousIndex,u=s.activeIndex,c=s.rtlTranslate;if(s.animating&&r.preventInteractionOnTransition)return!1;(e=Math.floor(n/r.slidesPerGroup))>=o.length&&(e=o.length-1),(u||r.initialSlide||0)===(d||0)&&i&&s.emit("beforeSlideChangeStart");var p,h=-o[e];if(s.updateProgress(h),r.normalizeSlideIndex)for(var f=0;f<l.length;f+=1)-Math.floor(100*h)>=Math.floor(100*l[f])&&(n=f);if(s.initialized&&n!==u){if(!s.allowSlideNext&&h<s.translate&&h<s.minTranslate())return!1;if(!s.allowSlidePrev&&h>s.translate&&h>s.maxTranslate()&&(u||0)!==n)return!1}return p=u<n?"next":n<u?"prev":"reset",c&&-h===s.translate||!c&&h===s.translate?(s.updateActiveIndex(n),r.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==r.effect&&s.setTranslate(h),"reset"!==p&&(s.transitionStart(i,p),s.transitionEnd(i,p)),!1):(0!==t&&F.transition?(s.setTransition(t),s.setTranslate(h),s.updateActiveIndex(n),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,a),s.transitionStart(i,p),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(i,p))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))):(s.setTransition(0),s.setTranslate(h),s.updateActiveIndex(n),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,a),s.transitionStart(i,p),s.transitionEnd(i,p)),!0)},slideToLoop:function(e,t,i,a){return void 0===t&&(t=this.params.speed),e=void 0===e?0:e,this.params.loop&&(e+=this.loopedSlides),this.slideTo(e,t,i=void 0===i?!0:i,a)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var a=this,s=a.params,n=a.animating;return s.loop?!n&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,a.slideTo(a.activeIndex+s.slidesPerGroup,e,t,i)):a.slideTo(a.activeIndex+s.slidesPerGroup,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var a=this,s=a.params,n=a.animating,r=a.snapGrid,o=a.slidesGrid,l=a.rtlTranslate;if(s.loop){if(n)return!1;a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var u,n=d(l?a.translate:-a.translate),l=r.map(d);return void 0!==(n=(o.map(d),r[l.indexOf(n)],r[l.indexOf(n)-1]))&&(u=o.indexOf(n))<0&&(u=a.activeIndex-1),a.slideTo(u,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),this.slideTo(this.activeIndex,e,t=void 0===t?!0:t,i)},slideToClosest:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var a,s,n=this,r=n.activeIndex,o=Math.floor(r/n.params.slidesPerGroup);return o<n.snapGrid.length-1&&(a=n.rtlTranslate?n.translate:-n.translate,s=n.snapGrid[o],(n.snapGrid[o+1]-s)/2<a-s&&(r=n.params.slidesPerGroup)),n.slideTo(r,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,a=t.$wrapperEl,s="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,n=t.clickedIndex;i.loop?t.animating||(e=parseInt(E(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?n<t.loopedSlides-s/2||n>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),n=a.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),j.nextTick(function(){t.slideTo(n)})):t.slideTo(n):n>t.slides.length-s?(t.loopFix(),n=a.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),j.nextTick(function(){t.slideTo(n)})):t.slideTo(n)):t.slideTo(n)}};var u={loopCreate:function(){var a=this,e=a.params,t=a.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var s=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var i=e.slidesPerGroup-s.length%e.slidesPerGroup;if(i!==e.slidesPerGroup){for(var n=0;n<i;n+=1){var r=E(c.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(r)}s=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=s.length),a.loopedSlides=parseInt(e.loopedSlides||e.slidesPerView,10),a.loopedSlides+=e.loopAdditionalSlides,a.loopedSlides>s.length&&(a.loopedSlides=s.length);var o=[],l=[];s.each(function(e,t){var i=E(t);e<a.loopedSlides&&l.push(t),e<s.length&&e>=s.length-a.loopedSlides&&o.push(t),i.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append(E(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var u=o.length-1;0<=u;--u)t.prepend(E(o[u].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){var e=this,t=e.params,i=e.activeIndex,a=e.slides,s=e.loopedSlides,n=e.allowSlidePrev,r=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d,o=-o[i]-e.getTranslate();i<s?(d=a.length-3*s+i,e.slideTo(d+=s,0,!1,!0)&&0!=o&&e.setTranslate((l?-e.translate:e.translate)-o)):("auto"===t.slidesPerView&&2*s<=i||i>=a.length-s)&&(d=-a.length+i+s,e.slideTo(d+=s,0,!1,!0)&&0!=o&&e.setTranslate((l?-e.translate:e.translate)-o)),e.allowSlidePrev=n,e.allowSlideNext=r},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}};var p={setGrabCursor:function(e){var t;F.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||((t=this.el).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){F.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}};var h,f,v,m={appendSlide:function(e){var t=this,i=t.$wrapperEl,a=t.params;if(a.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&i.append(e[s]);else i.append(e);a.loop&&t.loopCreate(),a.observer&&F.observer||t.update()},prependSlide:function(e){var t=this,i=t.params,a=t.$wrapperEl,s=t.activeIndex;i.loop&&t.loopDestroy();var n=s+1;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)e[r]&&a.prepend(e[r]);n=s+e.length}else a.prepend(e);i.loop&&t.loopCreate(),i.observer&&F.observer||t.update(),t.slideTo(n,0,!1)},addSlide:function(e,t){var i=this,a=i.$wrapperEl,s=i.params,n=i.activeIndex;s.loop&&(n-=i.loopedSlides,i.loopDestroy(),i.slides=a.children("."+s.slideClass));var r=i.slides.length;if(e<=0)i.prependSlide(t);else if(r<=e)i.appendSlide(t);else{for(var o=e<n?n+1:n,l=[],d=r-1;e<=d;--d){var u=i.slides.eq(d);u.remove(),l.unshift(u)}if("object"==typeof t&&"length"in t){for(var c=0;c<t.length;c+=1)t[c]&&a.append(t[c]);o=e<n?n+t.length:n}else a.append(t);for(var p=0;p<l.length;p+=1)a.append(l[p]);s.loop&&i.loopCreate(),s.observer&&F.observer||i.update(),s.loop?i.slideTo(o+i.loopedSlides,0,!1):i.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,i=t.params,a=t.$wrapperEl,s=t.activeIndex;i.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=a.children("."+i.slideClass));var n,r=s;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)n=e[o],t.slides[n]&&t.slides.eq(n).remove(),n<r&&--r;r=Math.max(r,0)}else t.slides[n=e]&&t.slides.eq(n).remove(),n<r&&--r,r=Math.max(r,0);i.loop&&t.loopCreate(),i.observer&&F.observer||t.update(),i.loop?t.slideTo(r+t.loopedSlides,0,!1):t.slideTo(r,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},g=(C=X.navigator.userAgent,M={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:X.cordova||X.phonegap,phonegap:X.cordova||X.phonegap},h=C.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),f=C.match(/(Android);?[\s\/]+([\d.]+)?/),S=C.match(/(iPad).*OS\s([\d_]+)/),v=C.match(/(iPod)(.*OS\s([\d_]+))?/),i=!S&&C.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h&&(M.os="windows",M.osVersion=h[2],M.windows=!0),f&&!h&&(M.os="android",M.osVersion=f[2],M.android=!0,M.androidChrome=0<=C.toLowerCase().indexOf("chrome")),(S||i||v)&&(M.os="ios",M.ios=!0),i&&!v&&(M.osVersion=i[2].replace(/_/g,"."),M.iphone=!0),S&&(M.osVersion=S[2].replace(/_/g,"."),M.ipad=!0),v&&(M.osVersion=v[3]?v[3].replace(/_/g,"."):null,M.iphone=!0),M.ios&&M.osVersion&&0<=C.indexOf("Version/")&&"10"===M.osVersion.split(".")[0]&&(M.osVersion=C.toLowerCase().split("version/")[1].split(" ")[0]),M.desktop=!(M.os||M.android||M.webView),M.webView=(i||S||v)&&C.match(/.*AppleWebKit(?!.*Safari)/i),M.os&&"ios"===M.os&&(S=M.osVersion.split("."),C=c.querySelector('meta[name="viewport"]'),M.minimalUi=!M.webView&&(v||i)&&(7==+S[0]?1<=+S[1]:7<+S[0])&&C&&0<=C.getAttribute("content").indexOf("minimal-ui")),M.pixelRatio=X.devicePixelRatio||1,M);function b(){var e,t,i,a=this,s=a.params,n=a.el;n&&0===n.offsetWidth||(s.breakpoints&&a.setBreakpoint(),e=a.allowSlideNext,t=a.allowSlidePrev,i=a.snapGrid,a.allowSlideNext=!0,a.allowSlidePrev=!0,a.updateSize(),a.updateSlides(),s.freeMode?(n=Math.min(Math.max(a.translate,a.maxTranslate()),a.minTranslate()),a.setTranslate(n),a.updateActiveIndex(),a.updateSlidesClasses(),s.autoHeight&&a.updateAutoHeight()):(a.updateSlidesClasses(),("auto"===s.slidesPerView||1<s.slidesPerView)&&a.isEnd&&!a.params.centeredSlides?a.slideTo(a.slides.length-1,0,!1,!0):a.slideTo(a.activeIndex,0,!1,!0)),a.autoplay&&a.autoplay.running&&a.autoplay.paused&&a.autoplay.run(),a.allowSlidePrev=t,a.allowSlideNext=e,a.params.watchOverflow&&i!==a.snapGrid&&a.checkOverflow())}var w={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsInverse:!1,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},y={update:s,translate:r,transition:o,slide:d,loop:u,grabCursor:p,manipulation:m,events:{attachEvents:function(){var e=this,t=e.params,i=e.touchEvents,a=e.el,s=e.wrapperEl;e.onTouchStart=function(e){var t,i,a,s,n=this,r=n.touchEventsData,o=n.params,l=n.touches;n.animating&&o.preventInteractionOnTransition||((t=e).originalEvent&&(t=t.originalEvent),r.isTouchEvent="touchstart"===t.type,!r.isTouchEvent&&"which"in t&&3===t.which||!r.isTouchEvent&&"button"in t&&0<t.button||r.isTouched&&r.isMoved||(o.noSwiping&&E(t.target).closest(o.noSwipingSelector||"."+o.noSwipingClass)[0]?n.allowClick=!0:o.swipeHandler&&!E(t).closest(o.swipeHandler)[0]||(l.currentX=("touchstart"===t.type?t.targetTouches[0]:t).pageX,l.currentY=("touchstart"===t.type?t.targetTouches[0]:t).pageY,i=l.currentX,s=l.currentY,a=o.edgeSwipeDetection||o.iOSEdgeSwipeDetection,e=o.edgeSwipeThreshold||o.iOSEdgeSwipeThreshold,a&&(i<=e||i>=X.screen.width-e)||(j.extend(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=i,l.startY=s,r.touchStartTime=j.now(),n.allowClick=!0,n.updateSize(),n.swipeDirection=void 0,0<o.threshold&&(r.allowThresholdMove=!1),"touchstart"!==t.type&&(s=!0,E(t.target).is(r.formElements)&&(s=!1),c.activeElement&&E(c.activeElement).is(r.formElements)&&c.activeElement!==t.target&&c.activeElement.blur(),s=s&&n.allowTouchMove&&o.touchStartPreventDefault,(o.touchStartForcePreventDefault||s)&&t.preventDefault()),n.emit("touchStart",t)))))}.bind(e),e.onTouchMove=function(e){var t=this,i=t.touchEventsData,a=t.params,s=t.touches,n=t.rtlTranslate,r=e;if(r.originalEvent&&(r=r.originalEvent),i.isTouched){if(!i.isTouchEvent||"mousemove"!==r.type){var o=("touchmove"===r.type?r.targetTouches[0]:r).pageX,l=("touchmove"===r.type?r.targetTouches[0]:r).pageY;if(r.preventedByNestedSwiper)return s.startX=o,void(s.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(i.isTouched&&(j.extend(s,{startX:o,startY:l,currentX:o,currentY:l}),i.touchStartTime=j.now()));if(i.isTouchEvent&&a.touchReleaseOnEdges&&!a.loop)if(t.isVertical()){if(l<s.startY&&t.translate<=t.maxTranslate()||l>s.startY&&t.translate>=t.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(o<s.startX&&t.translate<=t.maxTranslate()||o>s.startX&&t.translate>=t.minTranslate())return;if(i.isTouchEvent&&c.activeElement&&r.target===c.activeElement&&E(r.target).is(i.formElements))return i.isMoved=!0,void(t.allowClick=!1);if(i.allowTouchCallbacks&&t.emit("touchMove",r),!(r.targetTouches&&1<r.targetTouches.length)){s.currentX=o,s.currentY=l;e=s.currentX-s.startX,o=s.currentY-s.startY;if(!(t.params.threshold&&Math.sqrt(Math.pow(e,2)+Math.pow(o,2))<t.params.threshold))if(void 0===i.isScrolling&&(t.isHorizontal()&&s.currentY===s.startY||t.isVertical()&&s.currentX===s.startX?i.isScrolling=!1:25<=e*e+o*o&&(l=180*Math.atan2(Math.abs(o),Math.abs(e))/Math.PI,i.isScrolling=t.isHorizontal()?l>a.touchAngle:90-l>a.touchAngle)),i.isScrolling&&t.emit("touchMoveOpposite",r),void 0===i.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){t.allowClick=!1,r.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&r.stopPropagation(),i.isMoved||(a.loop&&t.loopFix(),i.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!a.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",r)),t.emit("sliderMove",r),i.isMoved=!0;e=t.isHorizontal()?e:o;s.diff=e,e*=a.touchRatio,t.swipeDirection=0<(e=n?-e:e)?"prev":"next",i.currentTranslate=e+i.startTranslate;o=!0,n=a.resistanceRatio;if(a.touchReleaseOnEdges&&(n=0),0<e&&i.currentTranslate>t.minTranslate()?(o=!1,a.resistance&&(i.currentTranslate=t.minTranslate()-1+Math.pow(-t.minTranslate()+i.startTranslate+e,n))):e<0&&i.currentTranslate<t.maxTranslate()&&(o=!1,a.resistance&&(i.currentTranslate=t.maxTranslate()+1-Math.pow(t.maxTranslate()-i.startTranslate-e,n))),o&&(r.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),0<a.threshold){if(!(Math.abs(e)>a.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,i.currentTranslate=i.startTranslate,void(s.diff=t.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}a.followFinger&&((a.freeMode||a.watchSlidesProgress||a.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),a.freeMode&&(0===i.velocities.length&&i.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:j.now()})),t.updateProgress(i.currentTranslate),t.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&t.emit("touchMoveOpposite",r)}.bind(e),e.onTouchEnd=function(e){var t=this,i=t.touchEventsData,a=t.params,s=t.touches,n=t.rtlTranslate,r=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&a.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);a.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var u,c=j.now(),e=c-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap",d),e<300&&300<c-i.lastClickTime&&(i.clickTimeout&&clearTimeout(i.clickTimeout),i.clickTimeout=j.nextTick(function(){t&&!t.destroyed&&t.emit("click",d)},300)),e<300&&c-i.lastClickTime<300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),t.emit("doubleTap",d))),i.lastClickTime=j.now(),j.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,u=a.followFinger?n?t.translate:-t.translate:-i.currentTranslate,a.freeMode)if(u<-t.minTranslate())t.slideTo(t.activeIndex);else if(u>-t.maxTranslate())t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1);else{if(a.freeModeMomentum){1<i.velocities.length?(g=i.velocities.pop(),h=i.velocities.pop(),p=g.position-h.position,h=g.time-h.time,t.velocity=p/h,t.velocity/=2,Math.abs(t.velocity)<a.freeModeMinimumVelocity&&(t.velocity=0),(150<h||300<j.now()-g.time)&&(t.velocity=0)):t.velocity=0,t.velocity*=a.freeModeMomentumVelocityRatio,i.velocities.length=0;var p=1e3*a.freeModeMomentumRatio,h=t.velocity*p,f=t.translate+h;n&&(f=-f);var v,m,g=!1,h=20*Math.abs(t.velocity)*a.freeModeMomentumBounceRatio;if(f<t.maxTranslate())a.freeModeMomentumBounce?(f+t.maxTranslate()<-h&&(f=t.maxTranslate()-h),v=t.maxTranslate(),i.allowMomentumBounce=g=!0):f=t.maxTranslate(),a.loop&&a.centeredSlides&&(m=!0);else if(f>t.minTranslate())a.freeModeMomentumBounce?(f-t.minTranslate()>h&&(f=t.minTranslate()+h),v=t.minTranslate(),i.allowMomentumBounce=g=!0):f=t.minTranslate(),a.loop&&a.centeredSlides&&(m=!0);else if(a.freeModeSticky){for(var b,w=0;w<l.length;w+=1)if(l[w]>-f){b=w;break}f=-(f=Math.abs(l[b]-f)<Math.abs(l[b-1]-f)||"next"===t.swipeDirection?l[b]:l[b-1])}if(m&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)p=n?Math.abs((-f-t.translate)/t.velocity):Math.abs((f-t.translate)/t.velocity);else if(a.freeModeSticky)return void t.slideToClosest();a.freeModeMomentumBounce&&g?(t.updateProgress(v),t.setTransition(p),t.setTranslate(f),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(a.speed),t.setTranslate(v),r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(f),t.setTransition(p),t.setTranslate(f),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(f),t.updateActiveIndex(),t.updateSlidesClasses()}else if(a.freeModeSticky)return void t.slideToClosest();(!a.freeModeMomentum||e>=a.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var y=0,x=t.slidesSizesGrid[0],T=0;T<o.length;T+=a.slidesPerGroup)void 0!==o[T+a.slidesPerGroup]?u>=o[T]&&u<o[T+a.slidesPerGroup]&&(x=o[(y=T)+a.slidesPerGroup]-o[T]):u>=o[T]&&(y=T,x=o[o.length-1]-o[o.length-2]);p=(u-o[y])/x;e>a.longSwipesMs?a.longSwipes?("next"===t.swipeDirection&&(p>=a.longSwipesRatio?t.slideTo(y+a.slidesPerGroup):t.slideTo(y)),"prev"===t.swipeDirection&&(p>1-a.longSwipesRatio?t.slideTo(y+a.slidesPerGroup):t.slideTo(y))):t.slideTo(t.activeIndex):a.shortSwipes?("next"===t.swipeDirection&&t.slideTo(y+a.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(y)):t.slideTo(t.activeIndex)}}.bind(e),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var n="container"===t.touchEventsTarget?a:s,a=!!t.nested;F.touch||!F.pointerEvents&&!F.prefixedPointerEvents?(F.touch&&(s=!("touchstart"!==i.start||!F.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},n.addEventListener(i.start,e.onTouchStart,s),n.addEventListener(i.move,e.onTouchMove,F.passiveListener?{passive:!1,capture:a}:a),n.addEventListener(i.end,e.onTouchEnd,s)),(t.simulateTouch&&!g.ios&&!g.android||t.simulateTouch&&!F.touch&&g.ios)&&(n.addEventListener("mousedown",e.onTouchStart,!1),c.addEventListener("mousemove",e.onTouchMove,a),c.addEventListener("mouseup",e.onTouchEnd,!1))):(n.addEventListener(i.start,e.onTouchStart,!1),c.addEventListener(i.move,e.onTouchMove,a),c.addEventListener(i.end,e.onTouchEnd,!1)),(t.preventClicks||t.preventClicksPropagation)&&n.addEventListener("click",e.onClick,!0),e.on(g.ios||g.android?"resize orientationchange observerUpdate":"resize observerUpdate",b,!0)},detachEvents:function(){var e=this,t=e.params,i=e.touchEvents,a=e.el,s=e.wrapperEl,n="container"===t.touchEventsTarget?a:s,a=!!t.nested;F.touch||!F.pointerEvents&&!F.prefixedPointerEvents?(F.touch&&(s=!("onTouchStart"!==i.start||!F.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},n.removeEventListener(i.start,e.onTouchStart,s),n.removeEventListener(i.move,e.onTouchMove,a),n.removeEventListener(i.end,e.onTouchEnd,s)),(t.simulateTouch&&!g.ios&&!g.android||t.simulateTouch&&!F.touch&&g.ios)&&(n.removeEventListener("mousedown",e.onTouchStart,!1),c.removeEventListener("mousemove",e.onTouchMove,a),c.removeEventListener("mouseup",e.onTouchEnd,!1))):(n.removeEventListener(i.start,e.onTouchStart,!1),c.removeEventListener(i.move,e.onTouchMove,a),c.removeEventListener(i.end,e.onTouchEnd,!1)),(t.preventClicks||t.preventClicksPropagation)&&n.removeEventListener("click",e.onClick,!0),e.off(g.ios||g.android?"resize orientationchange observerUpdate":"resize observerUpdate",b)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,i=e.initialized,a=e.loopedSlides;void 0===a&&(a=0);var s,n,r,o=e.params,l=o.breakpoints;!l||0===Object.keys(l).length||(s=e.getBreakpoint(l))&&e.currentBreakpoint!==s&&((n=s in l?l[s]:void 0)&&["slidesPerView","spaceBetween","slidesPerGroup"].forEach(function(e){var t=n[e];void 0!==t&&(n[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}),l=(r=n||e.originalParams).direction&&r.direction!==o.direction,o=o.loop&&(r.slidesPerView!==o.slidesPerView||l),l&&i&&e.changeDirection(),j.extend(e.params,r),j.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=s,o&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-a+e.loopedSlides,0,!1)),e.emit("breakpoint",r))},getBreakpoint:function(e){if(e){var t=!1,i=[];Object.keys(e).forEach(function(e){i.push(e)}),i.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var a=0;a<i.length;a+=1){var s=i[a];this.params.breakpointsInverse?s<=X.innerWidth&&(t=s):s>=X.innerWidth&&!t&&(t=s)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,i=this.params,e=this.rtl,a=this.$el,s=[];s.push("initialized"),s.push(i.direction),i.freeMode&&s.push("free-mode"),F.flexbox||s.push("no-flexbox"),i.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<i.slidesPerColumn&&s.push("multirow"),g.android&&s.push("android"),g.ios&&s.push("ios"),(q.isIE||q.isEdge)&&(F.pointerEvents||F.prefixedPointerEvents)&&s.push("wp8-"+i.direction),s.forEach(function(e){t.push(i.containerModifierClass+e)}),a.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,a,s,n){function r(){n&&n()}(!e.complete||!s)&&t?((s=new X.Image).onload=r,s.onerror=r,a&&(s.sizes=a),i&&(s.srcset=i),t&&(s.src=t)):r()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var a=e.imagesToLoad[i];e.loadImage(a,a.currentSrc||a.getAttribute("src"),a.srcset||a.getAttribute("srcset"),a.sizes||a.getAttribute("sizes"),!0,t)}}}},x={},T=function(l){function d(){for(var i,e=[],t=arguments.length;t--;)e[t]=arguments[t];i=(i=1===e.length&&e[0].constructor&&e[0].constructor===Object?e[0]:(n=e[0],e[1]))||{},i=j.extend({},i),n&&!i.el&&(i.el=n),l.call(this,i),Object.keys(y).forEach(function(t){Object.keys(y[t]).forEach(function(e){d.prototype[e]||(d.prototype[e]=y[t][e])})});var a=this;void 0===a.modules&&(a.modules={}),Object.keys(a.modules).forEach(function(e){var t=a.modules[e];t.params&&(e=Object.keys(t.params)[0],"object"==typeof(t=t.params[e])&&null!==t&&e in i&&"enabled"in t&&(!0===i[e]&&(i[e]={enabled:!0}),"object"!=typeof i[e]||"enabled"in i[e]||(i[e].enabled=!0),i[e]||(i[e]={enabled:!1})))});var s=j.extend({},w);a.useModulesParams(s),a.params=j.extend({},s,x,i),a.originalParams=j.extend({},a.params),a.passedParams=j.extend({},i);var n,r=(a.$=E)(a.params.el);if(n=r[0]){if(1<r.length){var o=[];return r.each(function(e,t){t=j.extend({},i,{el:t});o.push(new d(t))}),o}n.swiper=a,r.data("swiper",a);var s=r.children("."+a.params.wrapperClass);return j.extend(a,{$el:r,el:n,$wrapperEl:s,wrapperEl:s[0],classNames:[],slides:E(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===a.params.direction},isVertical:function(){return"vertical"===a.params.direction},rtl:"rtl"===n.dir.toLowerCase()||"rtl"===r.css("direction"),rtlTranslate:"horizontal"===a.params.direction&&("rtl"===n.dir.toLowerCase()||"rtl"===r.css("direction")),wrongRTL:"-webkit-box"===s.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEvents:(r=["touchstart","touchmove","touchend"],s=["mousedown","mousemove","mouseup"],F.pointerEvents?s=["pointerdown","pointermove","pointerup"]:F.prefixedPointerEvents&&(s=["MSPointerDown","MSPointerMove","MSPointerUp"]),a.touchEventsTouch={start:r[0],move:r[1],end:r[2]},a.touchEventsDesktop={start:s[0],move:s[1],end:s[2]},F.touch||!a.params.simulateTouch?a.touchEventsTouch:a.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:j.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.useModules(),a.params.init&&a.init(),a}}l&&(d.__proto__=l);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return((d.prototype=Object.create(l&&l.prototype)).constructor=d).prototype.slidesPerViewDynamic=function(){var e=this,t=e.params,i=e.slides,a=e.slidesGrid,s=e.size,n=e.activeIndex,r=1;if(t.centeredSlides){for(var o,l=i[n].swiperSlideSize,d=n+1;d<i.length;d+=1)i[d]&&!o&&(r+=1,s<(l+=i[d].swiperSlideSize)&&(o=!0));for(var u=n-1;0<=u;--u)i[u]&&!o&&(r+=1,s<(l+=i[u].swiperSlideSize)&&(o=!0))}else for(var c=n+1;c<i.length;c+=1)a[c]-a[n]<s&&(r+=1);return r},d.prototype.update=function(){var e,t,i=this;function a(){var e=i.rtlTranslate?-1*i.translate:i.translate,e=Math.min(Math.max(e,i.maxTranslate()),i.minTranslate());i.setTranslate(e),i.updateActiveIndex(),i.updateSlidesClasses()}i&&!i.destroyed&&(e=i.snapGrid,(t=i.params).breakpoints&&i.setBreakpoint(),i.updateSize(),i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.params.freeMode?(a(),i.params.autoHeight&&i.updateAutoHeight()):(("auto"===i.params.slidesPerView||1<i.params.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0))||a(),t.watchOverflow&&e!==i.snapGrid&&i.checkOverflow(),i.emit("update"))},d.prototype.changeDirection=function(i,e){void 0===e&&(e=!0);var t=this,a=t.params.direction;return(i=i||("horizontal"===a?"vertical":"horizontal"))===a||"horizontal"!==i&&"vertical"!==i||(t.$el.removeClass(""+t.params.containerModifierClass+a+" wp8-"+a).addClass(""+t.params.containerModifierClass+i),(q.isIE||q.isEdge)&&(F.pointerEvents||F.prefixedPointerEvents)&&t.$el.addClass(t.params.containerModifierClass+"wp8-"+i),t.params.direction=i,t.slides.each(function(e,t){"vertical"===i?t.style.width="":t.style.height=""}),t.emit("changeDirection"),e&&t.update()),t},d.prototype.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},d.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,a=i.params,s=i.$el,n=i.$wrapperEl,r=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),a.loop&&i.loopDestroy(),t&&(i.removeClasses(),s.removeAttr("style"),n.removeAttr("style"),r&&r.length&&r.removeClass([a.slideVisibleClass,a.slideActiveClass,a.slideNextClass,a.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),j.deleteProps(i)),i.destroyed=!0),null},d.extendDefaults=function(e){j.extend(x,e)},e.extendedDefaults.get=function(){return x},e.defaults.get=function(){return w},e.Class.get=function(){return l},e.$.get=function(){return E},Object.defineProperties(d,e),d}(e),S={name:"device",proto:{device:g},static:{device:g}},C={name:"support",proto:{support:F},static:{support:F}},M={name:"browser",proto:{browser:q},static:{browser:q}},s={name:"resize",create:function(){var e=this;j.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){X.addEventListener("resize",this.resize.resizeHandler),X.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){X.removeEventListener("resize",this.resize.resizeHandler),X.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},k={func:X.MutationObserver||X.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,a=new k.func(function(e){var t;1!==e.length?(t=function(){i.emit("observerUpdate",e[0])},X.requestAnimationFrame?X.requestAnimationFrame(t):X.setTimeout(t,0)):i.emit("observerUpdate",e[0])});a.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(a)},init:function(){var e=this;if(F.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),i=0;i<t.length;i+=1)e.observer.attach(t[i]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},r={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){j.extend(this,{observer:{init:k.init.bind(this),attach:k.attach.bind(this),destroy:k.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},P={update:function(e){var t=this,i=t.params,a=i.slidesPerView,s=i.slidesPerGroup,n=i.centeredSlides,r=t.params.virtual,o=r.addSlidesBefore,l=r.addSlidesAfter,d=t.virtual,u=d.from,c=d.to,p=d.slides,h=d.slidesGrid,f=d.renderSlide,i=d.offset;t.updateActiveIndex();var r=t.activeIndex||0,d=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",l=n?(g=Math.floor(a/2)+s+o,Math.floor(a/2)+s+l):(g=a+(s-1)+o,s+l),v=Math.max((r||0)-l,0),m=Math.min((r||0)+g,p.length-1),g=(t.slidesGrid[v]||0)-(t.slidesGrid[0]||0);function b(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(j.extend(t.virtual,{from:v,to:m,offset:g,slidesGrid:t.slidesGrid}),u===v&&c===m&&!e)return t.slidesGrid!==h&&g!==i&&t.slides.css(d,g+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:g,from:v,to:m,slides:function(){for(var e=[],t=v;t<=m;t+=1)e.push(p[t]);return e}()}),void b();var w=[],y=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var x=u;x<=c;x+=1)(x<v||m<x)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+x+'"]').remove();for(var T=0;T<p.length;T+=1)v<=T&&T<=m&&(void 0===c||e?y.push(T):(c<T&&y.push(T),T<u&&w.push(T)));y.forEach(function(e){t.$wrapperEl.append(f(p[e],e))}),w.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(p[e],e))}),t.$wrapperEl.children(".swiper-slide").css(d,g+"px"),b()},renderSlide:function(e,t){var i=this,a=i.params.virtual;if(a.cache&&i.virtual.cache[t])return i.virtual.cache[t];e=a.renderSlide?E(a.renderSlide.call(i,e,t)):E('<div class="'+i.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return e.attr("data-swiper-slide-index")||e.attr("data-swiper-slide-index",t),a.cache&&(i.virtual.cache[t]=e),e},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t,i,a=this,s=a.activeIndex,n=s+1,r=1;if(Array.isArray(e)){for(var o=0;o<e.length;o+=1)e[o]&&a.virtual.slides.unshift(e[o]);n=s+e.length,r=e.length}else a.virtual.slides.unshift(e);a.params.virtual.cache&&(t=a.virtual.cache,i={},Object.keys(t).forEach(function(e){i[parseInt(e,10)+r]=t[e]}),a.virtual.cache=i),a.virtual.update(!0),a.slideTo(n,0)},removeSlide:function(e){var t=this;if(null!=e){var i=t.activeIndex;if(Array.isArray(e))for(var a=e.length-1;0<=a;--a)t.virtual.slides.splice(e[a],1),t.params.virtual.cache&&delete t.virtual.cache[e[a]],e[a]<i&&--i,i=Math.max(i,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<i&&--i,i=Math.max(i,0);t.virtual.update(!0),t.slideTo(i,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},o={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){var e=this;j.extend(e,{virtual:{update:P.update.bind(e),appendSlide:P.appendSlide.bind(e),prependSlide:P.prependSlide.bind(e),removeSlide:P.removeSlide.bind(e),removeAllSlides:P.removeAllSlides.bind(e),renderSlide:P.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e,t=this;t.params.virtual.enabled&&(t.classNames.push(t.params.containerModifierClass+"virtual"),j.extend(t.params,e={watchSlidesProgress:!0}),j.extend(t.originalParams,e),t.params.initialSlide||t.virtual.update())},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},z={handle:function(e){var t=this,i=t.rtlTranslate,a=e,s=(a=a.originalEvent?a.originalEvent:a).keyCode||a.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===s||t.isVertical()&&40===s||34===s))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===s||t.isVertical()&&38===s||33===s))return!1;if(!(a.shiftKey||a.altKey||a.ctrlKey||a.metaKey||c.activeElement&&c.activeElement.nodeName&&("input"===c.activeElement.nodeName.toLowerCase()||"textarea"===c.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(33===s||34===s||37===s||39===s||38===s||40===s)){var n=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var r=X.innerWidth,o=X.innerHeight,e=t.$el.offset();i&&(e.left-=t.$el[0].scrollLeft);for(var l=[[e.left,e.top],[e.left+t.width,e.top],[e.left,e.top+t.height],[e.left+t.width,e.top+t.height]],d=0;d<l.length;d+=1){var u=l[d];0<=u[0]&&u[0]<=r&&0<=u[1]&&u[1]<=o&&(n=!0)}if(!n)return}t.isHorizontal()?(33!==s&&34!==s&&37!==s&&39!==s||(a.preventDefault?a.preventDefault():a.returnValue=!1),(34!==s&&39!==s||i)&&(33!==s&&37!==s||!i)||t.slideNext(),(33!==s&&37!==s||i)&&(34!==s&&39!==s||!i)||t.slidePrev()):(33!==s&&34!==s&&38!==s&&40!==s||(a.preventDefault?a.preventDefault():a.returnValue=!1),34!==s&&40!==s||t.slideNext(),33!==s&&38!==s||t.slidePrev()),t.emit("keyPress",s)}},enable:function(){this.keyboard.enabled||(E(c).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(E(c).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},d={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){j.extend(this,{keyboard:{enabled:!1,enable:z.enable.bind(this),disable:z.disable.bind(this),handle:z.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}};var $={lastScrollTime:j.now(),event:-1<X.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":((p=(u="onwheel")in c)||((m=c.createElement("div")).setAttribute(u,"return;"),p="function"==typeof m[u]),(p=!p&&c.implementation&&c.implementation.hasFeature&&!0!==c.implementation.hasFeature("","")?c.implementation.hasFeature("Events.wheel","3.0"):p)?"wheel":"mousewheel"),normalize:function(e){var t=0,i=0,a=0,s=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),a=10*t,s=10*i,"deltaY"in e&&(s=e.deltaY),((a="deltaX"in e?e.deltaX:a)||s)&&e.deltaMode&&(1===e.deltaMode?(a*=40,s*=40):(a*=800,s*=800)),{spinX:t=a&&!t?a<1?-1:1:t,spinY:i=s&&!i?s<1?-1:1:i,pixelX:a,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,a=i.params.mousewheel;if(!i.mouseEntered&&!a.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var s=0,n=i.rtlTranslate?-1:1,r=$.normalize(t);if(a.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(r.pixelX)>Math.abs(r.pixelY)))return!0;s=r.pixelX*n}else{if(!(Math.abs(r.pixelY)>Math.abs(r.pixelX)))return!0;s=r.pixelY}else s=Math.abs(r.pixelX)>Math.abs(r.pixelY)?-r.pixelX*n:-r.pixelY;if(0===s)return!0;if(a.invert&&(s=-s),i.params.freeMode){i.params.loop&&i.loopFix();e=i.getTranslate()+s*a.sensitivity,n=i.isBeginning,r=i.isEnd;if((e=e>=i.minTranslate()?i.minTranslate():e)<=i.maxTranslate()&&(e=i.maxTranslate()),i.setTransition(0),i.setTranslate(e),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!n&&i.isBeginning||!r&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky&&(clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=j.nextTick(function(){i.slideToClosest()},300)),i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),e===i.minTranslate()||e===i.maxTranslate())return!0}else{if(60<j.now()-i.mousewheel.lastScrollTime)if(s<0)if(i.isEnd&&!i.params.loop||i.animating){if(a.releaseOnEdges)return!0}else i.slideNext(),i.emit("scroll",t);else if(i.isBeginning&&!i.params.loop||i.animating){if(a.releaseOnEdges)return!0}else i.slidePrev(),i.emit("scroll",t);i.mousewheel.lastScrollTime=(new X.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var e=this;if(!$.event)return!1;if(e.mousewheel.enabled)return!1;var t=e.$el;return(t="container"!==e.params.mousewheel.eventsTarged?E(e.params.mousewheel.eventsTarged):t).on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on($.event,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=this;if(!$.event)return!1;if(!e.mousewheel.enabled)return!1;var t=e.$el;return(t="container"!==e.params.mousewheel.eventsTarged?E(e.params.mousewheel.eventsTarged):t).off($.event,e.mousewheel.handle),!(e.mousewheel.enabled=!1)}},O={update:function(){var e,t,i=this,a=i.params.navigation;i.params.loop||(e=(t=i.navigation).$nextEl,(t=t.$prevEl)&&0<t.length&&(i.isBeginning?t.addClass(a.disabledClass):t.removeClass(a.disabledClass),t[i.params.watchOverflow&&i.isLocked?"addClass":"removeClass"](a.lockClass)),e&&0<e.length&&(i.isEnd?e.addClass(a.disabledClass):e.removeClass(a.disabledClass),e[i.params.watchOverflow&&i.isLocked?"addClass":"removeClass"](a.lockClass)))},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,i=this,a=i.params.navigation;(a.nextEl||a.prevEl)&&(a.nextEl&&(e=E(a.nextEl),i.params.uniqueNavElements&&"string"==typeof a.nextEl&&1<e.length&&1===i.$el.find(a.nextEl).length&&(e=i.$el.find(a.nextEl))),a.prevEl&&(t=E(a.prevEl),i.params.uniqueNavElements&&"string"==typeof a.prevEl&&1<t.length&&1===i.$el.find(a.prevEl).length&&(t=i.$el.find(a.prevEl))),e&&0<e.length&&e.on("click",i.navigation.onNextClick),t&&0<t.length&&t.on("click",i.navigation.onPrevClick),j.extend(i.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,i=t.$nextEl,t=t.$prevEl;i&&i.length&&(i.off("click",e.navigation.onNextClick),i.removeClass(e.params.navigation.disabledClass)),t&&t.length&&(t.off("click",e.navigation.onPrevClick),t.removeClass(e.params.navigation.disabledClass))}},I={update:function(){var e=this,t=e.rtl,a=e.params.pagination;if(a.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var s,i=(e.virtual&&e.params.virtual.enabled?e.virtual:e).slides.length,n=e.pagination.$el,r=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((s=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>i-1-2*e.loopedSlides&&(s-=i-2*e.loopedSlides),r-1<s&&(s-=r),s<0&&"bullets"!==e.params.paginationType&&(s=r+s)):s=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===a.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var o,l,d,u,c,p=e.pagination.bullets;if(a.dynamicBullets&&(e.pagination.bulletSize=p.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),n.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(a.dynamicMainBullets+4)+"px"),1<a.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=s-e.previousIndex,e.pagination.dynamicBulletIndex>a.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=a.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=s-e.pagination.dynamicBulletIndex,d=((l=o+(Math.min(p.length,a.dynamicMainBullets)-1))+o)/2),p.removeClass(a.bulletActiveClass+" "+a.bulletActiveClass+"-next "+a.bulletActiveClass+"-next-next "+a.bulletActiveClass+"-prev "+a.bulletActiveClass+"-prev-prev "+a.bulletActiveClass+"-main"),1<n.length)p.each(function(e,t){var i=E(t),t=i.index();t===s&&i.addClass(a.bulletActiveClass),a.dynamicBullets&&(o<=t&&t<=l&&i.addClass(a.bulletActiveClass+"-main"),t===o&&i.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),t===l&&i.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next"))});else if(p.eq(s).addClass(a.bulletActiveClass),a.dynamicBullets){for(var h=p.eq(o),i=p.eq(l),f=o;f<=l;f+=1)p.eq(f).addClass(a.bulletActiveClass+"-main");h.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),i.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next")}a.dynamicBullets&&(c=Math.min(p.length,a.dynamicMainBullets+4),u=(e.pagination.bulletSize*c-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,c=t?"right":"left",p.css(e.isHorizontal()?c:"top",u+"px"))}"fraction"===a.type&&(n.find("."+a.currentClass).text(a.formatFractionCurrent(s+1)),n.find("."+a.totalClass).text(a.formatFractionTotal(r))),"progressbar"===a.type&&(d=a.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical",t=(s+1)/r,u=c=1,"horizontal"===d?c=t:u=t,n.find("."+a.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+c+") scaleY("+u+")").transition(e.params.speed)),"custom"===a.type&&a.renderCustom?(n.html(a.renderCustom(e,s+1,r)),e.emit("paginationRender",e,n[0])):e.emit("paginationUpdate",e,n[0]),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](a.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=(e.virtual&&e.params.virtual.enabled?e.virtual:e).slides.length,a=e.pagination.$el,s="";if("bullets"===t.type){for(var n=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,r=0;r<n;r+=1)t.renderBullet?s+=t.renderBullet.call(e,r,t.bulletClass):s+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";a.html(s),e.pagination.bullets=a.find("."+t.bulletClass)}"fraction"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',a.html(s)),"progressbar"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',a.html(s)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e,t=this,i=t.params.pagination;!i.el||0!==(e=E(i.el)).length&&(t.params.uniqueNavElements&&"string"==typeof i.el&&1<e.length&&1===t.$el.find(i.el).length&&(e=t.$el.find(i.el)),"bullets"===i.type&&i.clickable&&e.addClass(i.clickableClass),e.addClass(i.modifierClass+i.type),"bullets"===i.type&&i.dynamicBullets&&(e.addClass(""+i.modifierClass+i.type+"-dynamic"),t.pagination.dynamicBulletIndex=0,i.dynamicMainBullets<1&&(i.dynamicMainBullets=1)),"progressbar"===i.type&&i.progressbarOpposite&&e.addClass(i.progressbarOppositeClass),i.clickable&&e.on("click","."+i.bulletClass,function(e){e.preventDefault();e=E(this).index()*t.params.slidesPerGroup;t.params.loop&&(e+=t.loopedSlides),t.slideTo(e)}),j.extend(t.pagination,{$el:e,el:e[0]}))},destroy:function(){var e,t=this,i=t.params.pagination;i.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length&&((e=t.pagination.$el).removeClass(i.hiddenClass),e.removeClass(i.modifierClass+i.type),t.pagination.bullets&&t.pagination.bullets.removeClass(i.bulletActiveClass),i.clickable&&e.off("click","."+i.bulletClass))}},_={setTranslate:function(){var e,t,i,a,s,n,r,o,l=this;l.params.scrollbar.el&&l.scrollbar.el&&(r=l.scrollbar,e=l.rtlTranslate,o=l.progress,t=r.dragSize,i=r.trackSize,a=r.$dragEl,s=r.$el,n=l.params.scrollbar,o=(i-(r=t))*o,e?0<(o=-o)?(r=t-o,o=0):i<-o+t&&(r=i+o):o<0?(r=t+o,o=0):i<o+t&&(r=i-o),l.isHorizontal()?(F.transforms3d?a.transform("translate3d("+o+"px, 0, 0)"):a.transform("translateX("+o+"px)"),a[0].style.width=r+"px"):(F.transforms3d?a.transform("translate3d(0px, "+o+"px, 0)"):a.transform("translateY("+o+"px)"),a[0].style.height=r+"px"),n.hide&&(clearTimeout(l.scrollbar.timeout),s[0].style.opacity=1,l.scrollbar.timeout=setTimeout(function(){s[0].style.opacity=0,s.transition(400)},1e3)))},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e,t,i,a,s,n,r,o=this;o.params.scrollbar.el&&o.scrollbar.el&&(t=(e=o.scrollbar).$dragEl,i=e.$el,t[0].style.width="",t[0].style.height="",a=o.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,n=(s=o.size/o.virtualSize)*(a/o.size),r="auto"===o.params.scrollbar.dragSize?a*s:parseInt(o.params.scrollbar.dragSize,10),o.isHorizontal()?t[0].style.width=r+"px":t[0].style.height=r+"px",i[0].style.display=1<=s?"none":"",o.params.scrollbar.hide&&(i[0].style.opacity=0),j.extend(e,{trackSize:a,divider:s,moveDivider:n,dragSize:r}),e.$el[o.params.watchOverflow&&o.isLocked?"addClass":"removeClass"](o.params.scrollbar.lockClass))},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY},setDragPosition:function(e){var t=this,i=t.scrollbar,a=t.rtlTranslate,s=i.$el,n=i.dragSize,r=i.trackSize,o=i.dragStartPos,n=(i.getPointerPosition(e)-s.offset()[t.isHorizontal()?"left":"top"]-(null!==o?o:n/2))/(r-n);n=Math.max(Math.min(n,1),0),a&&(n=1-n);n=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*n;t.updateProgress(n),t.setTranslate(n),t.updateActiveIndex(),t.updateSlidesClasses()},onDragStart:function(e){var t=this,i=t.params.scrollbar,a=t.scrollbar,s=t.$wrapperEl,n=a.$el,r=a.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===r[0]||e.target===r?a.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),a.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),n.transition(0),i.hide&&n.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,a=t.$el,s=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),a.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,i=t.params.scrollbar,a=t.scrollbar.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=j.nextTick(function(){a.css("opacity",0),a.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e,t,i,a,s,n=this;n.params.scrollbar.el&&(a=n.scrollbar,e=n.touchEventsTouch,t=n.touchEventsDesktop,s=n.params,i=a.$el[0],a=!(!F.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},s=!(!F.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1},F.touch?(i.addEventListener(e.start,n.scrollbar.onDragStart,a),i.addEventListener(e.move,n.scrollbar.onDragMove,a),i.addEventListener(e.end,n.scrollbar.onDragEnd,s)):(i.addEventListener(t.start,n.scrollbar.onDragStart,a),c.addEventListener(t.move,n.scrollbar.onDragMove,a),c.addEventListener(t.end,n.scrollbar.onDragEnd,s)))},disableDraggable:function(){var e,t,i,a,s,n=this;n.params.scrollbar.el&&(a=n.scrollbar,e=n.touchEventsTouch,t=n.touchEventsDesktop,s=n.params,i=a.$el[0],a=!(!F.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},s=!(!F.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1},F.touch?(i.removeEventListener(e.start,n.scrollbar.onDragStart,a),i.removeEventListener(e.move,n.scrollbar.onDragMove,a),i.removeEventListener(e.end,n.scrollbar.onDragEnd,s)):(i.removeEventListener(t.start,n.scrollbar.onDragStart,a),c.removeEventListener(t.move,n.scrollbar.onDragMove,a),c.removeEventListener(t.end,n.scrollbar.onDragEnd,s)))},init:function(){var e,t,i,a,s=this;s.params.scrollbar.el&&(e=s.scrollbar,a=s.$el,i=E((t=s.params.scrollbar).el),0===(a=(i=s.params.uniqueNavElements&&"string"==typeof t.el&&1<i.length&&1===a.find(t.el).length?a.find(t.el):i).find("."+s.params.scrollbar.dragClass)).length&&(a=E('<div class="'+s.params.scrollbar.dragClass+'"></div>'),i.append(a)),j.extend(e,{$el:i,el:i[0],$dragEl:a,dragEl:a[0]}),t.draggable&&e.enableDraggable())},destroy:function(){this.scrollbar.disableDraggable()}},L={setTransform:function(e,t){var i=this.rtl,a=E(e),s=i?-1:1,n=a.attr("data-swiper-parallax")||"0",r=a.attr("data-swiper-parallax-x"),o=a.attr("data-swiper-parallax-y"),e=a.attr("data-swiper-parallax-scale"),i=a.attr("data-swiper-parallax-opacity");r||o?(r=r||"0",o=o||"0"):this.isHorizontal()?(r=n,o="0"):(o=n,r="0"),r=0<=r.indexOf("%")?parseInt(r,10)*t*s+"%":r*t*s+"px",o=0<=o.indexOf("%")?parseInt(o,10)*t+"%":o*t+"px",null!=i&&(i=i-(i-1)*(1-Math.abs(t)),a[0].style.opacity=i),null==e?a.transform("translate3d("+r+", "+o+", 0px)"):(t=e-(e-1)*(1-Math.abs(t)),a.transform("translate3d("+r+", "+o+", 0px) scale("+t+")"))},setTranslate:function(){var a=this,e=a.$el,t=a.slides,s=a.progress,n=a.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){a.parallax.setTransform(t,s)}),t.each(function(e,t){var i=t.progress;1<a.params.slidesPerGroup&&"auto"!==a.params.slidesPerView&&(i+=Math.ceil(e/2)-s*(n.length-1)),i=Math.min(Math.max(i,-1),1),E(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){a.parallax.setTransform(t,i)})})},setTransition:function(a){void 0===a&&(a=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){var i=E(t),t=parseInt(i.attr("data-swiper-parallax-duration"),10)||a;0===a&&(t=0),i.transition(t)})}},D={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,a=e.targetTouches[1].pageX,e=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(a-t,2)+Math.pow(e-i,2))},onGestureStart:function(e){var t=this,i=t.params.zoom,a=t.zoom,s=a.gesture;if(a.fakeGestureTouched=!1,a.fakeGestureMoved=!1,!F.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;a.fakeGestureTouched=!0,s.scaleStart=D.getDistanceBetweenTouches(e)}s.$slideEl&&s.$slideEl.length||(s.$slideEl=E(e.target).closest(".swiper-slide"),0===s.$slideEl.length&&(s.$slideEl=t.slides.eq(t.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas"),s.$imageWrapEl=s.$imageEl.parent("."+i.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl.transition(0),t.zoom.isScaling=!0):s.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,a=i.gesture;if(!F.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,a.scaleMove=D.getDistanceBetweenTouches(e)}a.$imageEl&&0!==a.$imageEl.length&&(i.scale=F.gestures?e.scale*i.currentScale:a.scaleMove/a.scaleStart*i.currentScale,i.scale>a.maxRatio&&(i.scale=a.maxRatio-1+Math.pow(i.scale-a.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),a.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,a=i.gesture;if(!F.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!g.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}a.$imageEl&&0!==a.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,a.maxRatio),t.minRatio),a.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(a.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,t=t.image;i.$imageEl&&0!==i.$imageEl.length&&(t.isTouched||(g.android&&e.preventDefault(),t.isTouched=!0,t.touchesStart.x=("touchstart"===e.type?e.targetTouches[0]:e).pageX,t.touchesStart.y=("touchstart"===e.type?e.targetTouches[0]:e).pageY))},onTouchMove:function(e){var t=this,i=t.zoom,a=i.gesture,s=i.image,n=i.velocity;if(a.$imageEl&&0!==a.$imageEl.length&&(t.allowClick=!1,s.isTouched&&a.$slideEl)){s.isMoved||(s.width=a.$imageEl[0].offsetWidth,s.height=a.$imageEl[0].offsetHeight,s.startX=j.getTranslate(a.$imageWrapEl[0],"x")||0,s.startY=j.getTranslate(a.$imageWrapEl[0],"y")||0,a.slideWidth=a.$slideEl[0].offsetWidth,a.slideHeight=a.$slideEl[0].offsetHeight,a.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var r=s.width*i.scale,o=s.height*i.scale;if(!(r<a.slideWidth&&o<a.slideHeight)){if(s.minX=Math.min(a.slideWidth/2-r/2,0),s.maxX=-s.minX,s.minY=Math.min(a.slideHeight/2-o/2,0),s.maxY=-s.minY,s.touchesCurrent.x=("touchmove"===e.type?e.targetTouches[0]:e).pageX,s.touchesCurrent.y=("touchmove"===e.type?e.targetTouches[0]:e).pageY,!s.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),n.prevPositionX||(n.prevPositionX=s.touchesCurrent.x),n.prevPositionY||(n.prevPositionY=s.touchesCurrent.y),n.prevTime||(n.prevTime=Date.now()),n.x=(s.touchesCurrent.x-n.prevPositionX)/(Date.now()-n.prevTime)/2,n.y=(s.touchesCurrent.y-n.prevPositionY)/(Date.now()-n.prevTime)/2,Math.abs(s.touchesCurrent.x-n.prevPositionX)<2&&(n.x=0),Math.abs(s.touchesCurrent.y-n.prevPositionY)<2&&(n.y=0),n.prevPositionX=s.touchesCurrent.x,n.prevPositionY=s.touchesCurrent.y,n.prevTime=Date.now(),a.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,a=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var s=300,n=300,r=a.x*s,o=i.currentX+r,r=a.y*n,r=i.currentY+r;0!==a.x&&(s=Math.abs((o-i.currentX)/a.x)),0!==a.y&&(n=Math.abs((r-i.currentY)/a.y));n=Math.max(s,n);i.currentX=o,i.currentY=r;r=i.width*e.scale,e=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-r/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-e/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(n).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,a,s=this,n=s.zoom,r=s.params.zoom,o=n.gesture,l=n.image;o.$slideEl||(o.$slideEl=s.clickedSlide?E(s.clickedSlide):s.slides.eq(s.activeIndex),o.$imageEl=o.$slideEl.find("img, svg, canvas"),o.$imageWrapEl=o.$imageEl.parent("."+r.containerClass)),o.$imageEl&&0!==o.$imageEl.length&&(o.$slideEl.addClass(""+r.zoomedSlideClass),l=void 0===l.touchesStart.x&&e?(a=("touchend"===e.type?e.changedTouches[0]:e).pageX,("touchend"===e.type?e.changedTouches[0]:e).pageY):(a=l.touchesStart.x,l.touchesStart.y),n.scale=o.$imageWrapEl.attr("data-swiper-zoom")||r.maxRatio,n.currentScale=o.$imageWrapEl.attr("data-swiper-zoom")||r.maxRatio,e?(r=o.$slideEl[0].offsetWidth,e=o.$slideEl[0].offsetHeight,t=o.$slideEl.offset().left+r/2-a,i=o.$slideEl.offset().top+e/2-l,a=o.$imageEl[0].offsetWidth,l=o.$imageEl[0].offsetHeight,a=a*n.scale,l=l*n.scale,a=Math.min(r/2-a/2,0),e=Math.min(e/2-l/2,0),(l=-a)<(t=(t=t*n.scale)<a?a:t)&&(t=l),(l=-e)<(i=(i=i*n.scale)<e?e:i)&&(i=l)):i=t=0,o.$imageWrapEl.transition(300).transform("translate3d("+t+"px, "+i+"px,0)"),o.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+n.scale+")"))},out:function(){var e=this,t=e.zoom,i=e.params.zoom,a=t.gesture;a.$slideEl||(a.$slideEl=e.clickedSlide?E(e.clickedSlide):e.slides.eq(e.activeIndex),a.$imageEl=a.$slideEl.find("img, svg, canvas"),a.$imageWrapEl=a.$imageEl.parent("."+i.containerClass)),a.$imageEl&&0!==a.$imageEl.length&&(t.scale=1,t.currentScale=1,a.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),a.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),a.$slideEl.removeClass(""+i.zoomedSlideClass),a.$slideEl=void 0)},enable:function(){var e,t=this,i=t.zoom;i.enabled||(i.enabled=!0,e=!("touchstart"!==t.touchEvents.start||!F.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1},F.gestures?(t.$wrapperEl.on("gesturestart",".swiper-slide",i.onGestureStart,e),t.$wrapperEl.on("gesturechange",".swiper-slide",i.onGestureChange,e),t.$wrapperEl.on("gestureend",".swiper-slide",i.onGestureEnd,e)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.on(t.touchEvents.start,".swiper-slide",i.onGestureStart,e),t.$wrapperEl.on(t.touchEvents.move,".swiper-slide",i.onGestureChange,e),t.$wrapperEl.on(t.touchEvents.end,".swiper-slide",i.onGestureEnd,e)),t.$wrapperEl.on(t.touchEvents.move,"."+t.params.zoom.containerClass,i.onTouchMove))},disable:function(){var e,t=this,i=t.zoom;i.enabled&&(t.zoom.enabled=!1,e=!("touchstart"!==t.touchEvents.start||!F.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1},F.gestures?(t.$wrapperEl.off("gesturestart",".swiper-slide",i.onGestureStart,e),t.$wrapperEl.off("gesturechange",".swiper-slide",i.onGestureChange,e),t.$wrapperEl.off("gestureend",".swiper-slide",i.onGestureEnd,e)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.off(t.touchEvents.start,".swiper-slide",i.onGestureStart,e),t.$wrapperEl.off(t.touchEvents.move,".swiper-slide",i.onGestureChange,e),t.$wrapperEl.off(t.touchEvents.end,".swiper-slide",i.onGestureEnd,e)),t.$wrapperEl.off(t.touchEvents.move,"."+t.params.zoom.containerClass,i.onTouchMove))}},A={loadInSlide:function(e,o){void 0===o&&(o=!0);var l,d=this,u=d.params.lazy;void 0!==e&&0!==d.slides.length&&(e=(l=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e)).find("."+u.elementClass+":not(."+u.loadedClass+"):not(."+u.loadingClass+")"),0!==(e=l.hasClass(u.elementClass)&&!l.hasClass(u.loadedClass)&&!l.hasClass(u.loadingClass)?e.add(l[0]):e).length&&e.each(function(e,t){var i=E(t);i.addClass(u.loadingClass);var a=i.attr("data-background"),s=i.attr("data-src"),n=i.attr("data-srcset"),r=i.attr("data-sizes");d.loadImage(i[0],s||a,n,r,!1,function(){var e,t;null==d||!d||d&&!d.params||d.destroyed||(a?(i.css("background-image",'url("'+a+'")'),i.removeAttr("data-background")):(n&&(i.attr("srcset",n),i.removeAttr("data-srcset")),r&&(i.attr("sizes",r),i.removeAttr("data-sizes")),s&&(i.attr("src",s),i.removeAttr("data-src"))),i.addClass(u.loadedClass).removeClass(u.loadingClass),l.find("."+u.preloaderClass).remove(),d.params.loop&&o&&(t=l.attr("data-swiper-slide-index"),l.hasClass(d.params.slideDuplicateClass)?(e=d.$wrapperEl.children('[data-swiper-slide-index="'+t+'"]:not(.'+d.params.slideDuplicateClass+")"),d.lazy.loadInSlide(e.index(),!1)):(t=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+t+'"]'),d.lazy.loadInSlide(t.index(),!1))),d.emit("lazyImageReady",l[0],i[0]))}),d.emit("lazyImageLoad",l[0],i[0])}))},load:function(){var i=this,t=i.$wrapperEl,a=i.params,s=i.slides,e=i.activeIndex,n=i.virtual&&a.virtual.enabled,r=a.lazy,o=a.slidesPerView;function l(e){if(n){if(t.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(s[e])return 1}function d(e){return n?E(e).attr("data-swiper-slide-index"):E(e).index()}if("auto"===o&&(o=0),i.lazy.initialImageLoaded||(i.lazy.initialImageLoaded=!0),i.params.watchSlidesVisibility)t.children("."+a.slideVisibleClass).each(function(e,t){t=n?E(t).attr("data-swiper-slide-index"):E(t).index();i.lazy.loadInSlide(t)});else if(1<o)for(var u=e;u<e+o;u+=1)l(u)&&i.lazy.loadInSlide(u);else i.lazy.loadInSlide(e);if(r.loadPrevNext)if(1<o||r.loadPrevNextAmount&&1<r.loadPrevNextAmount){for(var c=r.loadPrevNextAmount,r=o,p=Math.min(e+r+Math.max(c,r),s.length),c=Math.max(e-Math.max(r,c),0),h=e+o;h<p;h+=1)l(h)&&i.lazy.loadInSlide(h);for(var f=c;f<e;f+=1)l(f)&&i.lazy.loadInSlide(f)}else{c=t.children("."+a.slideNextClass);0<c.length&&i.lazy.loadInSlide(d(c));c=t.children("."+a.slidePrevClass);0<c.length&&i.lazy.loadInSlide(d(c))}}},H={LinearSpline:function(e,t){var i,a,s,n,r,o=function(e,t){for(a=-1,i=e.length;1<i-a;)e[s=i+a>>1]<=t?a=s:i=s;return i};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=o(this.x,e),n=r-1,(e-this.x[n])*(this.y[r]-this.y[n])/(this.x[r]-this.x[n])+this.y[n]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new H.LinearSpline(t.slidesGrid,e.slidesGrid):new H.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,a,s=this,n=s.controller.control;function r(e){var t=s.rtlTranslate?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),a=-s.controller.spline.interpolate(-t)),a&&"container"!==s.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),a=(t-s.minTranslate())*i+e.minTranslate()),s.params.controller.inverse&&(a=e.maxTranslate()-a),e.updateProgress(a),e.setTranslate(a,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(n))for(var o=0;o<n.length;o+=1)n[o]!==t&&n[o]instanceof T&&r(n[o]);else n instanceof T&&t!==n&&r(n)},setTransition:function(t,e){var i,a=this,s=a.controller.control;function n(e){e.setTransition(t,a),0!==t&&(e.transitionStart(),e.params.autoHeight&&j.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){s&&(e.params.loop&&"slide"===a.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(i=0;i<s.length;i+=1)s[i]!==e&&s[i]instanceof T&&n(s[i]);else s instanceof T&&e!==s&&n(s)}},N={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,i=t.params.a11y;13===e.keyCode&&(e=E(e.target),t.navigation&&t.navigation.$nextEl&&e.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(i.lastSlideMessage):t.a11y.notify(i.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&e.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(i.firstSlideMessage):t.a11y.notify(i.prevSlideMessage)),t.pagination&&e.is("."+t.params.pagination.bulletClass)&&e[0].click())},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e,t,i=this;i.params.loop||(e=(t=i.navigation).$nextEl,(t=t.$prevEl)&&0<t.length&&(i.isBeginning?i.a11y.disableEl(t):i.a11y.enableEl(t)),e&&0<e.length&&(i.isEnd?i.a11y.disableEl(e):i.a11y.enableEl(e)))},updatePagination:function(){var i=this,a=i.params.a11y;i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.bullets.each(function(e,t){t=E(t);i.a11y.makeElFocusable(t),i.a11y.addElRole(t,"button"),i.a11y.addElLabel(t,a.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,i,a=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,a.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,a.prevSlideMessage),i.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e,t,i=this;i.a11y.liveRegion&&0<i.a11y.liveRegion.length&&i.a11y.liveRegion.remove(),i.navigation&&i.navigation.$nextEl&&(e=i.navigation.$nextEl),i.navigation&&i.navigation.$prevEl&&(t=i.navigation.$prevEl),e&&e.off("keydown",i.a11y.onEnterKey),t&&t.off("keydown",i.a11y.onEnterKey),i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.$el.off("keydown","."+i.params.pagination.bulletClass,i.a11y.onEnterKey)}},V={init:function(){var e=this;if(e.params.history){if(!X.history||!X.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=V.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||X.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||X.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=V.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=X.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){this.history.initialized&&this.params.history.enabled&&(t=this.slides.eq(t),t=V.slugify(t.attr("data-history")),X.location.pathname.includes(e)||(t=e+"/"+t),(e=X.history.state)&&e.value===t||(this.params.history.replaceState?X.history.replaceState({value:t},null,t):X.history.pushState({value:t},null,t)))},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){var a=this;if(t)for(var s=0,n=a.slides.length;s<n;s+=1){var r=a.slides.eq(s);V.slugify(r.attr("data-history"))!==t||r.hasClass(a.params.slideDuplicateClass)||(r=r.index(),a.slideTo(r,e,i))}else a.slideTo(0,e,i)}},G={onHashCange:function(){var e=this,t=c.location.hash.replace("#","");t===e.slides.eq(e.activeIndex).attr("data-hash")||void 0!==(t=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index())&&e.slideTo(t)},setHash:function(){var e=this;e.hashNavigation.initialized&&e.params.hashNavigation.enabled&&(e.params.hashNavigation.replaceState&&X.history&&X.history.replaceState?X.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""):(e=(e=e.slides.eq(e.activeIndex)).attr("data-hash")||e.attr("data-history"),c.location.hash=e||""))},init:function(){var e=this;if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var t=c.location.hash.replace("#","");if(t)for(var i=0,a=e.slides.length;i<a;i+=1){var s=e.slides.eq(i);(s.attr("data-hash")||s.attr("data-history"))!==t||s.hasClass(e.params.slideDuplicateClass)||(s=s.index(),e.slideTo(s,0,e.params.runCallbacksOnInit,!0))}e.params.hashNavigation.watchState&&E(X).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&E(X).off("hashchange",this.hashNavigation.onHashCange)}},B={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=j.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},i)},start:function(){var e=this;return void 0===e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}},Y={setTranslate:function(){for(var e=this,t=e.slides,i=0;i<t.length;i+=1){var a=e.slides.eq(i),s=-a[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);var n=0;e.isHorizontal()||(n=s,s=0);var r=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(a[0].progress),0):1+Math.min(Math.max(a[0].progress,-1),0);a.css({opacity:r}).transform("translate3d("+s+"px, "+n+"px, 0px)")}},setTransition:function(e){var i,a=this,t=a.slides,s=a.$wrapperEl;t.transition(e),a.params.virtualTranslate&&0!==e&&(i=!1,t.transitionEnd(function(){if(!i&&a&&!a.destroyed){i=!0,a.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}}))}},R={setTranslate:function(){var e,t=this,i=t.$el,a=t.$wrapperEl,s=t.slides,n=t.width,r=t.height,o=t.rtlTranslate,l=t.size,d=t.params.cubeEffect,u=t.isHorizontal(),c=t.virtual&&t.params.virtual.enabled,p=0;d.shadow&&(u?(0===(e=a.find(".swiper-cube-shadow")).length&&(e=E('<div class="swiper-cube-shadow"></div>'),a.append(e)),e.css({height:n+"px"})):0===(e=i.find(".swiper-cube-shadow")).length&&(e=E('<div class="swiper-cube-shadow"></div>'),i.append(e)));for(var h,f=0;f<s.length;f+=1){var v=s.eq(f),m=f,g=90*(m=c?parseInt(v.attr("data-swiper-slide-index"),10):m),b=Math.floor(g/360);o&&(g=-g,b=Math.floor(-g/360));var w=Math.max(Math.min(v[0].progress,1),-1),y=0,x=0,T=0;m%4==0?(y=4*-b*l,T=0):(m-1)%4==0?(y=0,T=4*-b*l):(m-2)%4==0?(y=l+4*b*l,T=l):(m-3)%4==0&&(y=-l,T=3*l+4*l*b),o&&(y=-y),u||(x=y,y=0),w<=1&&-1<w&&(p=o?90*-m-90*w:90*m+90*w),v.transform("rotateX("+(u?0:-g)+"deg) rotateY("+(u?g:0)+"deg) translate3d("+y+"px, "+x+"px, "+T+"px)"),d.slideShadows&&(x=u?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),T=u?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom"),0===x.length&&(x=E('<div class="swiper-slide-shadow-'+(u?"left":"top")+'"></div>'),v.append(x)),0===T.length&&(T=E('<div class="swiper-slide-shadow-'+(u?"right":"bottom")+'"></div>'),v.append(T)),x.length&&(x[0].style.opacity=Math.max(-w,0)),T.length&&(T[0].style.opacity=Math.max(w,0)))}a.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow&&(u?e.transform("translate3d(0px, "+(n/2+d.shadowOffset)+"px, "+-n/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")"):(h=Math.abs(p)-90*Math.floor(Math.abs(p)/90),i=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),n=d.shadowScale,h=d.shadowScale/i,i=d.shadowOffset,e.transform("scale3d("+n+", 1, "+h+") translate3d(0px, "+(r/2+i)+"px, "+-r/2/h+"px) rotateX(-90deg)"))),a.transform("translate3d(0px,0,"+(q.isSafari||q.isUiWebView?-l/2:0)+"px) rotateX("+(t.isHorizontal()?0:p)+"deg) rotateY("+(t.isHorizontal()?-p:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},W={setTranslate:function(){for(var e=this,t=e.slides,i=e.rtlTranslate,a=0;a<t.length;a+=1){var s,n,r=t.eq(a),o=r[0].progress,l=-180*(o=e.params.flipEffect.limitRotation?Math.max(Math.min(r[0].progress,1),-1):o),d=0,u=-r[0].swiperSlideOffset,c=0;e.isHorizontal()?i&&(l=-l):(c=u,d=-l,l=u=0),r[0].style.zIndex=-Math.abs(Math.round(o))+t.length,e.params.flipEffect.slideShadows&&(s=e.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),n=e.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom"),0===s.length&&(s=E('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),r.append(s)),0===n.length&&(n=E('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),r.append(n)),s.length&&(s[0].style.opacity=Math.max(-o,0)),n.length&&(n[0].style.opacity=Math.max(o,0))),r.transform("translate3d("+u+"px, "+c+"px, 0px) rotateX("+d+"deg) rotateY("+l+"deg)")}},setTransition:function(e){var i,a=this,t=a.slides,s=a.activeIndex,n=a.$wrapperEl;t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),a.params.virtualTranslate&&0!==e&&(i=!1,t.eq(s).transitionEnd(function(){if(!i&&a&&!a.destroyed){i=!0,a.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)n.trigger(e[t])}}))}},U={setTranslate:function(){for(var e=this,t=e.width,i=e.height,a=e.slides,s=e.$wrapperEl,n=e.slidesSizesGrid,r=e.params.coverflowEffect,o=e.isHorizontal(),e=e.translate,l=o?t/2-e:i/2-e,d=o?r.rotate:-r.rotate,u=r.depth,c=0,p=a.length;c<p;c+=1){var h=a.eq(c),f=n[c],v=(l-h[0].swiperSlideOffset-f/2)/f*r.modifier,m=o?d*v:0,g=o?0:d*v,b=-u*Math.abs(v),w=o?0:r.stretch*v,f=o?r.stretch*v:0;Math.abs(f)<.001&&(f=0),Math.abs(w)<.001&&(w=0),Math.abs(b)<.001&&(b=0),Math.abs(m)<.001&&(m=0),Math.abs(g)<.001&&(g=0),h.transform("translate3d("+f+"px,"+w+"px,"+b+"px)  rotateX("+g+"deg) rotateY("+m+"deg)"),h[0].style.zIndex=1-Math.abs(Math.round(v)),r.slideShadows&&(g=o?h.find(".swiper-slide-shadow-left"):h.find(".swiper-slide-shadow-top"),m=o?h.find(".swiper-slide-shadow-right"):h.find(".swiper-slide-shadow-bottom"),0===g.length&&(g=E('<div class="swiper-slide-shadow-'+(o?"left":"top")+'"></div>'),h.append(g)),0===m.length&&(m=E('<div class="swiper-slide-shadow-'+(o?"right":"bottom")+'"></div>'),h.append(m)),g.length&&(g[0].style.opacity=0<v?v:0),m.length&&(m[0].style.opacity=0<-v?-v:0))}(F.pointerEvents||F.prefixedPointerEvents)&&(s[0].style.perspectiveOrigin=l+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},K={init:function(){var e=this,t=e.params.thumbs,i=e.constructor;t.swiper instanceof i?(e.thumbs.swiper=t.swiper,j.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),j.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):j.isObject(t.swiper)&&(e.thumbs.swiper=new i(j.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick:function(){var e,t,i,a=this,s=a.thumbs.swiper;s&&(t=s.clickedIndex,(e=s.clickedSlide)&&E(e).hasClass(a.params.thumbs.slideThumbActiveClass)||null!=t&&(i=s.params.loop?parseInt(E(s.clickedSlide).attr("data-swiper-slide-index"),10):t,a.params.loop&&(e=a.activeIndex,a.slides.eq(e).hasClass(a.params.slideDuplicateClass)&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,e=a.activeIndex),s=a.slides.eq(e).prevAll('[data-swiper-slide-index="'+i+'"]').eq(0).index(),t=a.slides.eq(e).nextAll('[data-swiper-slide-index="'+i+'"]').eq(0).index(),i=void 0===s||void 0!==t&&t-e<e-s?t:s),a.slideTo(i)))},update:function(e){var t=this,i=t.thumbs.swiper;if(i){var a,s,n,r="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView;t.realIndex!==i.realIndex&&(a=i.activeIndex,n=i.params.loop?(i.slides.eq(a).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,a=i.activeIndex),n=i.slides.eq(a).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),s=i.slides.eq(a).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),void 0===n?s:void 0===s?n:s-a==a-n?a:s-a<a-n?s:n):t.realIndex,i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(n)<0&&(i.params.centeredSlides?n=a<n?n-Math.floor(r/2)+1:n+Math.floor(r/2)-1:a<n&&(n=n-r+1),i.slideTo(n,e?0:void 0)));var o=1,l=t.params.thumbs.slideThumbActiveClass;if(1<t.params.slidesPerView&&!t.params.centeredSlides&&(o=t.params.slidesPerView),i.slides.removeClass(l),i.params.loop||i.params.virtual)for(var d=0;d<o;d+=1)i.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+d)+'"]').addClass(l);else for(var u=0;u<o;u+=1)i.slides.eq(t.realIndex+u).addClass(l)}}},d=[S,C,M,s,r,o,d,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;j.extend(e,{mousewheel:{enabled:!1,enable:$.enable.bind(e),disable:$.disable.bind(e),handle:$.handle.bind(e),handleMouseEnter:$.handleMouseEnter.bind(e),handleMouseLeave:$.handleMouseLeave.bind(e),lastScrollTime:j.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){var e=this;j.extend(e,{navigation:{init:O.init.bind(e),update:O.update.bind(e),destroy:O.destroy.bind(e),onNextClick:O.onNextClick.bind(e),onPrevClick:O.onPrevClick.bind(e)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,i=this,a=i.navigation,s=a.$nextEl,a=a.$prevEl;!i.params.navigation.hideOnClick||E(e.target).is(a)||E(e.target).is(s)||(s?t=s.hasClass(i.params.navigation.hiddenClass):a&&(t=a.hasClass(i.params.navigation.hiddenClass)),!0===t?i.emit("navigationShow",i):i.emit("navigationHide",i),s&&s.toggleClass(i.params.navigation.hiddenClass),a&&a.toggleClass(i.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){var e=this;j.extend(e,{pagination:{init:I.init.bind(e),render:I.render.bind(e),update:I.update.bind(e),destroy:I.destroy.bind(e),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){var t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&0<t.pagination.$el.length&&!E(e.target).hasClass(t.params.pagination.bulletClass)&&(!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){var e=this;j.extend(e,{scrollbar:{init:_.init.bind(e),destroy:_.destroy.bind(e),updateSize:_.updateSize.bind(e),setTranslate:_.setTranslate.bind(e),setTransition:_.setTransition.bind(e),enableDraggable:_.enableDraggable.bind(e),disableDraggable:_.disableDraggable.bind(e),setDragPosition:_.setDragPosition.bind(e),getPointerPosition:_.getPointerPosition.bind(e),onDragStart:_.onDragStart.bind(e),onDragMove:_.onDragMove.bind(e),onDragEnd:_.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){j.extend(this,{parallax:{setTransform:L.setTransform.bind(this),setTranslate:L.setTranslate.bind(this),setTransition:L.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var a=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=D[e].bind(a)}),j.extend(a,{zoom:t});var s=1;Object.defineProperty(a.zoom,"scale",{get:function(){return s},set:function(e){var t,i;s!==e&&(t=a.zoom.gesture.$imageEl?a.zoom.gesture.$imageEl[0]:void 0,i=a.zoom.gesture.$slideEl?a.zoom.gesture.$slideEl[0]:void 0,a.emit("zoomChange",e,t,i)),s=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){j.extend(this,{lazy:{initialImageLoaded:!1,load:A.load.bind(this),loadInSlide:A.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(!e.params.lazy.loadOnTransitionStart&&(e.params.lazy.loadOnTransitionStart||e.lazy.initialImageLoaded)||e.lazy.load())},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){var e=this;j.extend(e,{controller:{control:e.params.controller.control,getInterpolateFunction:H.getInterpolateFunction.bind(e),setTranslate:H.setTranslate.bind(e),setTransition:H.setTransition.bind(e)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;j.extend(t,{a11y:{liveRegion:E('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(N).forEach(function(e){t.a11y[e]=N[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){var e=this;j.extend(e,{history:{init:V.init.bind(e),setHistory:V.setHistory.bind(e),setHistoryPopState:V.setHistoryPopState.bind(e),scrollToSlide:V.scrollToSlide.bind(e),destroy:V.destroy.bind(e)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){var e=this;j.extend(e,{hashNavigation:{initialized:!1,init:G.init.bind(e),destroy:G.destroy.bind(e),setHash:G.setHash.bind(e),onHashCange:G.onHashCange.bind(e)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;j.extend(t,{autoplay:{running:!1,paused:!1,run:B.run.bind(t),start:B.start.bind(t),stop:B.stop.bind(t),pause:B.pause.bind(t),onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){j.extend(this,{fadeEffect:{setTranslate:Y.setTranslate.bind(this),setTransition:Y.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"fade"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"fade"),j.extend(t.params,e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0}),j.extend(t.originalParams,e))},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){j.extend(this,{cubeEffect:{setTranslate:R.setTranslate.bind(this),setTransition:R.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"cube"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"cube"),t.classNames.push(t.params.containerModifierClass+"3d"),j.extend(t.params,e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0}),j.extend(t.originalParams,e))},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){j.extend(this,{flipEffect:{setTranslate:W.setTranslate.bind(this),setTransition:W.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"flip"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"flip"),t.classNames.push(t.params.containerModifierClass+"3d"),j.extend(t.params,e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0}),j.extend(t.originalParams,e))},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){j.extend(this,{coverflowEffect:{setTranslate:U.setTranslate.bind(this),setTransition:U.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){j.extend(this,{thumbs:{swiper:null,init:K.init.bind(this),update:K.update.bind(this),onThumbClick:K.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===T.use&&(T.use=T.Class.use,T.installModule=T.Class.installModule),T.use(d),T}),function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AOS=t():e.AOS=t()}(this,function(){return s={},i.m=a=[function(e,t,i){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(){f=(0,h.default)(),g()}var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i,a=arguments[t];for(i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},r=(a(i(1)),i(6)),o=a(r),l=a(i(7)),d=a(i(8)),u=a(i(9)),c=a(i(10)),p=a(i(11)),h=a(i(14)),f=[],v=!1,m={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},g=function(){if(v=0<arguments.length&&void 0!==arguments[0]&&arguments[0]?!0:v)return f=(0,p.default)(f,m),(0,c.default)(f,m.once),f};e.exports={init:function(e){m=n(m,e),f=(0,h.default)();var t=document.all&&!window.atob;return!0===(e=m.disable)||"mobile"===e&&u.default.mobile()||"phone"===e&&u.default.phone()||"tablet"===e&&u.default.tablet()||"function"==typeof e&&!0===e()||t?void f.forEach(function(e,t){e.node.removeAttribute("data-aos"),e.node.removeAttribute("data-aos-easing"),e.node.removeAttribute("data-aos-duration"),e.node.removeAttribute("data-aos-delay")}):(m.disableMutationObserver||d.default.isSupported()||(console.info('\n      aos: MutationObserver is not supported on this browser,\n      code mutations observing has been disabled.\n      You may have to call "refreshHard()" by yourself.\n    '),m.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",m.easing),document.querySelector("body").setAttribute("data-aos-duration",m.duration),document.querySelector("body").setAttribute("data-aos-delay",m.delay),"DOMContentLoaded"===m.startEvent&&-1<["complete","interactive"].indexOf(document.readyState)?g(!0):("load"===m.startEvent?window:document).addEventListener(m.startEvent,function(){g(!0)}),window.addEventListener("resize",(0,l.default)(g,m.debounceDelay,!0)),window.addEventListener("orientationchange",(0,l.default)(g,m.debounceDelay,!0)),window.addEventListener("scroll",(0,o.default)(function(){(0,c.default)(f,m.once)},m.throttleDelay)),m.disableMutationObserver||d.default.ready("[data-aos]",s),f)},refresh:g,refreshHard:s}},function(e,t){},,,,,function(h,e){!function(e){"use strict";function n(a,i,e){function s(e){var t=l,i=d;return l=d=void 0,f=e,c=a.apply(i,t)}function n(e){var t=e-h;return void 0===h||i<=t||t<0||m&&u<=e-f}function r(){var e,t=E();return n(t)?o(t):void(p=setTimeout(r,(t=i-((e=t)-h),m?T(t,u-(e-f)):t)))}function o(e){return p=void 0,g&&l?s(e):(l=d=void 0,c)}function t(){var e=E(),t=n(e);if(l=arguments,d=this,h=e,t){if(void 0===p)return f=t=h,p=setTimeout(r,i),v?s(t):c;if(m)return p=setTimeout(r,i),s(h)}return void 0===p&&(p=setTimeout(r,i)),c}var l,d,u,c,p,h,f=0,v=!1,m=!1,g=!0;if("function"!=typeof a)throw new TypeError(y);return i=w(i)||0,b(e)&&(v=!!e.leading,m="maxWait"in e,u=m?x(w(e.maxWait)||0,i):u,g="trailing"in e?!!e.trailing:g),t.cancel=function(){void 0!==p&&clearTimeout(p),l=h=d=p=void(f=0)},t.flush=function(){return void 0===p?c:o(E())},t}function b(e){var t=void 0===e?"undefined":a(e);return e&&("object"==t||"function"==t)}function i(e){return"symbol"==(void 0===e?"undefined":a(e))||!!(t=e)&&"object"==(void 0===t?"undefined":a(t))&&"[object Symbol]"==p.call(e);var t}function w(e){if("number"==typeof e)return e;if(i(e))return s;if("string"!=typeof(e=b(e)?b(t="function"==typeof e.valueOf?e.valueOf():e)?t+"":t:e))return 0===e?e:+e;e=e.replace(r,"");var t=l.test(e);return t||d.test(e)?u(e.slice(2),t?2:8):o.test(e)?s:+e}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y="Expected a function",s=NaN,r=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,d=/^0o[0-7]+$/i,u=parseInt,t="object"==(void 0===e?"undefined":a(e))&&e&&e.Object===Object&&e,e="object"==("undefined"==typeof self?"undefined":a(self))&&self&&self.Object===Object&&self,c=t||e||Function("return this")(),p=Object.prototype.toString,x=Math.max,T=Math.min,E=function(){return c.Date.now()};h.exports=function(e,t,i){var a=!0,s=!0;if("function"!=typeof e)throw new TypeError(y);return b(i)&&(a="leading"in i?!!i.leading:a,s="trailing"in i?!!i.trailing:s),n(e,t,{leading:a,maxWait:t,trailing:s})}}.call(e,function(){return this}())},function(h,e){!function(e){"use strict";function b(e){var t=void 0===e?"undefined":a(e);return e&&("object"==t||"function"==t)}function i(e){return"symbol"==(void 0===e?"undefined":a(e))||!!(t=e)&&"object"==(void 0===t?"undefined":a(t))&&p.call(e)==n;var t}function w(e){if("number"==typeof e)return e;if(i(e))return s;if("string"!=typeof(e=b(e)?b(t="function"==typeof e.valueOf?e.valueOf():e)?t+"":t:e))return 0===e?e:+e;e=e.replace(r,"");var t=l.test(e);return t||d.test(e)?u(e.slice(2),t?2:8):o.test(e)?s:+e}function y(){return c.Date.now()}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=NaN,n="[object Symbol]",r=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,d=/^0o[0-7]+$/i,u=parseInt,t="object"==(void 0===e?"undefined":a(e))&&e&&e.Object===Object&&e,e="object"==("undefined"==typeof self?"undefined":a(self))&&self&&self.Object===Object&&self,c=t||e||Function("return this")(),p=Object.prototype.toString,x=Math.max,T=Math.min;h.exports=function(a,i,e){function s(e){var t=l,i=d;return l=d=void 0,f=e,c=a.apply(i,t)}function n(e){var t=e-h;return void 0===h||i<=t||t<0||m&&u<=e-f}function r(){var e,t=y();return n(t)?o(t):void(p=setTimeout(r,(t=i-((e=t)-h),m?T(t,u-(e-f)):t)))}function o(e){return p=void 0,g&&l?s(e):(l=d=void 0,c)}function t(){var e=y(),t=n(e);if(l=arguments,d=this,h=e,t){if(void 0===p)return f=t=h,p=setTimeout(r,i),v?s(t):c;if(m)return p=setTimeout(r,i),s(h)}return void 0===p&&(p=setTimeout(r,i)),c}var l,d,u,c,p,h,f=0,v=!1,m=!1,g=!0;if("function"!=typeof a)throw new TypeError("Expected a function");return i=w(i)||0,b(e)&&(v=!!e.leading,m="maxWait"in e,u=m?x(w(e.maxWait)||0,i):u,g="trailing"in e?!!e.trailing:g),t.cancel=function(){void 0!==p&&clearTimeout(p),l=h=d=p=void(f=0)},t.flush=function(){return void 0===p?c:o(y())},t}}.call(e,function(){return this}())},function(e,t){"use strict";function s(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function n(e){e&&e.forEach(function(e){var t=Array.prototype.slice.call(e.addedNodes),e=Array.prototype.slice.call(e.removedNodes);if(function e(t){for(var i,a=void 0,a=0;a<t.length;a+=1){if((i=t[a]).dataset&&i.dataset.aos)return!0;if(i.children&&e(i.children))return!0}return!1}(t.concat(e)))return r()})}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){};t.default={isSupported:function(){return!!s()},ready:function(e,t){var i=window.document,a=new(s())(n);r=t,a.observe(i.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}}},function(e,t){"use strict";function i(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(t,"__esModule",{value:!0});var a=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,s=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,n=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,r=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,o=(function(e,t,i){return t&&d(e.prototype,t),i&&d(e,i),e}(l,[{key:"phone",value:function(){var e=i();return!(!a.test(e)&&!s.test(e.substr(0,4)))}},{key:"mobile",value:function(){var e=i();return!(!n.test(e)&&!r.test(e.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),l);function l(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l)}function d(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}t.default=new o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,n){var r=window.pageYOffset,o=window.innerHeight;e.forEach(function(e,t){var i,a,s;a=o+r,s=n,e=(i=e).node.getAttribute("data-aos-once"),a>i.position?i.node.classList.add("aos-animate"):void 0===e||"false"!==e&&(s||"true"===e)||i.node.classList.remove("aos-animate")})}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=i(12),a=(i=i)&&i.__esModule?i:{default:i};t.default=function(e,i){return e.forEach(function(e,t){e.node.classList.add("aos-init"),e.position=(0,a.default)(e.node,i.offset)}),e}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=i(13),r=(i=i)&&i.__esModule?i:{default:i};t.default=function(e,t){var i=0,a=0,s=window.innerHeight,n={offset:e.getAttribute("data-aos-offset"),anchor:e.getAttribute("data-aos-anchor"),anchorPlacement:e.getAttribute("data-aos-anchor-placement")};switch(n.offset&&!isNaN(n.offset)&&(a=parseInt(n.offset)),n.anchor&&document.querySelectorAll(n.anchor)&&(e=document.querySelectorAll(n.anchor)[0]),i=(0,r.default)(e).top,n.anchorPlacement){case"top-bottom":break;case"center-bottom":i+=e.offsetHeight/2;break;case"bottom-bottom":i+=e.offsetHeight;break;case"top-center":i+=s/2;break;case"bottom-center":i+=s/2+e.offsetHeight;break;case"center-center":i+=s/2+e.offsetHeight/2;break;case"top-top":i+=s;break;case"bottom-top":i+=e.offsetHeight+s;break;case"center-top":i+=e.offsetHeight/2+s}return i+(a=!(n.anchorPlacement||n.offset||isNaN(t))?t:a)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){for(var t=0,i=0;e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t+=e.offsetLeft-("BODY"!=e.tagName?e.scrollLeft:0),i+=e.offsetTop-("BODY"!=e.tagName?e.scrollTop:0),e=e.offsetParent;return{top:i,left:t}}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){return e=e||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(e,function(e){return{node:e}})}}],i.c=s,i.p="dist/",i(0);function i(e){if(s[e])return s[e].exports;var t=s[e]={exports:{},id:e,loaded:!1};return a[e].call(t.exports,t,t.exports,i),t.loaded=!0,t.exports}var a,s}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery","./mouse","../keycode","../version","../widget"],e):e(jQuery)}(function(u){"use strict";return u.widget("ui.slider",u.ui.mouse,{version:"1.13.0",widgetEventPrefix:"slide",options:{animate:!1,classes:{"ui-slider":"ui-corner-all","ui-slider-handle":"ui-corner-all","ui-slider-range":"ui-corner-all ui-widget-header"},distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},numPages:5,_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this._calculateNewMax(),this._addClass("ui-slider ui-slider-"+this.orientation,"ui-widget ui-widget-content"),this._refresh(),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,t=this.options,i=this.element.find(".ui-slider-handle"),a=[],s=t.values&&t.values.length||1;for(i.length>s&&(i.slice(s).remove(),i=i.slice(0,s)),e=i.length;e<s;e++)a.push("<span tabindex='0'></span>");this.handles=i.add(u(a.join("")).appendTo(this.element)),this._addClass(this.handles,"ui-slider-handle","ui-state-default"),this.handle=this.handles.eq(0),this.handles.each(function(e){u(this).data("ui-slider-handle-index",e).attr("tabIndex",0)})},_createRange:function(){var e=this.options;e.range?(!0===e.range&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:Array.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?(this._removeClass(this.range,"ui-slider-range-min ui-slider-range-max"),this.range.css({left:"",bottom:""})):(this.range=u("<div>").appendTo(this.element),this._addClass(this.range,"ui-slider-range")),"min"!==e.range&&"max"!==e.range||this._addClass(this.range,"ui-slider-range-"+e.range)):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){this._off(this.handles),this._on(this.handles,this._handleEvents),this._hoverable(this.handles),this._focusable(this.handles)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this._mouseDestroy()},_mouseCapture:function(e){var i,a,s,n,t,r,o=this,l=this.options;return!l.disabled&&(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),r={x:e.pageX,y:e.pageY},i=this._normValueFromMouse(r),a=this._valueMax()-this._valueMin()+1,this.handles.each(function(e){var t=Math.abs(i-o.values(e));(t<a||a===t&&(e===o._lastChangedValue||o.values(e)===l.min))&&(a=t,s=u(this),n=e)}),!1!==this._start(e,n)&&(this._mouseSliding=!0,this._handleIndex=n,this._addClass(s,null,"ui-state-active"),s.trigger("focus"),t=s.offset(),r=!u(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=r?{left:0,top:0}:{left:e.pageX-t.left-s.width()/2,top:e.pageY-t.top-s.height()/2-(parseInt(s.css("borderTopWidth"),10)||0)-(parseInt(s.css("borderBottomWidth"),10)||0)+(parseInt(s.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,n,i),this._animateOff=!0))},_mouseStart:function(){return!0},_mouseDrag:function(e){var t={x:e.pageX,y:e.pageY},t=this._normValueFromMouse(t);return this._slide(e,this._handleIndex,t),!1},_mouseStop:function(e){return this._removeClass(this.handles,null,"ui-state-active"),this._mouseSliding=!1,this._stop(e,this._handleIndex),this._change(e,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(e){var t,e="horizontal"===this.orientation?(t=this.elementSize.width,e.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(t=this.elementSize.height,e.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),e=e/t;return(e=1<e?1:e)<0&&(e=0),"vertical"===this.orientation&&(e=1-e),t=this._valueMax()-this._valueMin(),t=this._valueMin()+e*t,this._trimAlignValue(t)},_uiHash:function(e,t,i){var a={handle:this.handles[e],handleIndex:e,value:void 0!==t?t:this.value()};return this._hasMultipleValues()&&(a.value=void 0!==t?t:this.values(e),a.values=i||this.values()),a},_hasMultipleValues:function(){return this.options.values&&this.options.values.length},_start:function(e,t){return this._trigger("start",e,this._uiHash(t))},_slide:function(e,t,i){var a,s=this.value(),n=this.values();this._hasMultipleValues()&&(a=this.values(t?0:1),s=this.values(t),2===this.options.values.length&&!0===this.options.range&&(i=0===t?Math.min(a,i):Math.max(a,i)),n[t]=i),i!==s&&!1!==this._trigger("slide",e,this._uiHash(t,i,n))&&(this._hasMultipleValues()?this.values(t,i):this.value(i))},_stop:function(e,t){this._trigger("stop",e,this._uiHash(t))},_change:function(e,t){this._keySliding||this._mouseSliding||(this._lastChangedValue=t,this._trigger("change",e,this._uiHash(t)))},value:function(e){return arguments.length?(this.options.value=this._trimAlignValue(e),this._refreshValue(),void this._change(null,0)):this._value()},values:function(e,t){var i,a,s;if(1<arguments.length)return this.options.values[e]=this._trimAlignValue(t),this._refreshValue(),void this._change(null,e);if(!arguments.length)return this._values();if(!Array.isArray(e))return this._hasMultipleValues()?this._values(e):this.value();for(i=this.options.values,a=e,s=0;s<i.length;s+=1)i[s]=this._trimAlignValue(a[s]),this._change(null,s);this._refreshValue()},_setOption:function(e,t){var i,a=0;switch("range"===e&&!0===this.options.range&&("min"===t?(this.options.value=this._values(0),this.options.values=null):"max"===t&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),Array.isArray(this.options.values)&&(a=this.options.values.length),this._super(e,t),e){case"orientation":this._detectOrientation(),this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-"+this.orientation),this._refreshValue(),this.options.range&&this._refreshRange(t),this.handles.css("horizontal"===t?"bottom":"left","");break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),i=a-1;0<=i;i--)this._change(null,i);this._animateOff=!1;break;case"step":case"min":case"max":this._animateOff=!0,this._calculateNewMax(),this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_setOptionDisabled:function(e){this._super(e),this._toggleClass(null,"ui-state-disabled",!!e)},_value:function(){var e=this.options.value;return e=this._trimAlignValue(e)},_values:function(e){var t,i;if(arguments.length)return e=this.options.values[e],this._trimAlignValue(e);if(this._hasMultipleValues()){for(t=this.options.values.slice(),i=0;i<t.length;i+=1)t[i]=this._trimAlignValue(t[i]);return t}return[]},_trimAlignValue:function(e){if(e<=this._valueMin())return this._valueMin();if(e>=this._valueMax())return this._valueMax();var t=0<this.options.step?this.options.step:1,i=(e-this._valueMin())%t,e=e-i;return 2*Math.abs(i)>=t&&(e+=0<i?t:-t),parseFloat(e.toFixed(5))},_calculateNewMax:function(){var e=this.options.max,t=this._valueMin(),i=this.options.step;(e=Math.round((e-t)/i)*i+t)>this.options.max&&(e-=i),this.max=parseFloat(e.toFixed(this._precision()))},_precision:function(){var e=this._precisionOf(this.options.step);return e=null!==this.options.min?Math.max(e,this._precisionOf(this.options.min)):e},_precisionOf:function(e){var t=e.toString(),e=t.indexOf(".");return-1===e?0:t.length-e-1},_valueMin:function(){return this.options.min},_valueMax:function(){return this.max},_refreshRange:function(e){"vertical"===e&&this.range.css({width:"",left:""}),"horizontal"===e&&this.range.css({height:"",bottom:""})},_refreshValue:function(){var t,i,e,a,s,n=this.options.range,r=this.options,o=this,l=!this._animateOff&&r.animate,d={};this._hasMultipleValues()?this.handles.each(function(e){i=(o.values(e)-o._valueMin())/(o._valueMax()-o._valueMin())*100,d["horizontal"===o.orientation?"left":"bottom"]=i+"%",u(this).stop(1,1)[l?"animate":"css"](d,r.animate),!0===o.options.range&&("horizontal"===o.orientation?(0===e&&o.range.stop(1,1)[l?"animate":"css"]({left:i+"%"},r.animate),1===e&&o.range[l?"animate":"css"]({width:i-t+"%"},{queue:!1,duration:r.animate})):(0===e&&o.range.stop(1,1)[l?"animate":"css"]({bottom:i+"%"},r.animate),1===e&&o.range[l?"animate":"css"]({height:i-t+"%"},{queue:!1,duration:r.animate}))),t=i}):(e=this.value(),a=this._valueMin(),s=this._valueMax(),i=s!==a?(e-a)/(s-a)*100:0,d["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[l?"animate":"css"](d,r.animate),"min"===n&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:i+"%"},r.animate),"max"===n&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:100-i+"%"},r.animate),"min"===n&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:i+"%"},r.animate),"max"===n&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:100-i+"%"},r.animate))},_handleEvents:{keydown:function(e){var t,i,a,s=u(e.target).data("ui-slider-handle-index");switch(e.keyCode){case u.ui.keyCode.HOME:case u.ui.keyCode.END:case u.ui.keyCode.PAGE_UP:case u.ui.keyCode.PAGE_DOWN:case u.ui.keyCode.UP:case u.ui.keyCode.RIGHT:case u.ui.keyCode.DOWN:case u.ui.keyCode.LEFT:if(e.preventDefault(),!this._keySliding&&(this._keySliding=!0,this._addClass(u(e.target),null,"ui-state-active"),!1===this._start(e,s)))return}switch(a=this.options.step,t=i=this._hasMultipleValues()?this.values(s):this.value(),e.keyCode){case u.ui.keyCode.HOME:i=this._valueMin();break;case u.ui.keyCode.END:i=this._valueMax();break;case u.ui.keyCode.PAGE_UP:i=this._trimAlignValue(t+(this._valueMax()-this._valueMin())/this.numPages);break;case u.ui.keyCode.PAGE_DOWN:i=this._trimAlignValue(t-(this._valueMax()-this._valueMin())/this.numPages);break;case u.ui.keyCode.UP:case u.ui.keyCode.RIGHT:if(t===this._valueMax())return;i=this._trimAlignValue(t+a);break;case u.ui.keyCode.DOWN:case u.ui.keyCode.LEFT:if(t===this._valueMin())return;i=this._trimAlignValue(t-a)}this._slide(e,s,i)},keyup:function(e){var t=u(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,t),this._change(e,t),this._removeClass(u(e.target),null,"ui-state-active"))}}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
