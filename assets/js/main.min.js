"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(n="Object"===n&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function numberWithCommas(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")}var mobileHeaderBtn=document.getElementById("showMenu"),mobileHeaderLayer=document.getElementById("headerLayer");function toggleHeaderMenu(){mobileHeaderLayer.classList.toggle("btn-clicked--show"),mobileHeaderBtn.classList.toggle("header-btn--clicked")}mobileHeaderBtn.addEventListener("click",toggleHeaderMenu),mobileHeaderLayer.addEventListener("click",toggleHeaderMenu);var allUncertainSlides=document.querySelectorAll(".uncertain-form__slide"),allUncertainSlidesHeaders=document.querySelectorAll(".slide__header--uncertain"),allDataHeader=[];allUncertainSlidesHeaders.forEach(function(e){e=e.getAttribute("data-slide-header-uncertain");allDataHeader.push(e)});var uncertainFormNavigation=document.getElementById("uncertainNavigation"),listItemUncertainCounter=1;function checkWhatSlideIsShowedInUncertainForm(){allUncertainSlides.forEach(function(e){var t=e.getAttribute("id");t.includes("First")&&e.classList.contains("slide--show")?(document.getElementById("UncertainFirstSlideItem").classList.contains("list-navigation__bullet--active")||document.getElementById("UncertainFirstSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--disabled")||document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--disabled"),document.getElementById("UncertainThirdSlideItem").classList.contains("list-navigation__bullet--disabled")||document.getElementById("UncertainThirdSlideItem").classList.toggle("list-navigation__bullet--disabled")):t.includes("Second")&&e.classList.contains("slide--show")?(document.getElementById("UncertainFirstSlideItem").classList.contains("list-navigation__bullet--completed")||document.getElementById("UncertainFirstSlideItem").classList.toggle("list-navigation__bullet--completed"),document.getElementById("UncertainFirstSlideItem").classList.contains("list-navigation__bullet--active")&&document.getElementById("UncertainFirstSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--disabled")&&document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--disabled"),document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--active")||document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("uncertainStatusBar").classList.contains("progress-navigation-bar--33p")||(document.getElementById("uncertainStatusBar").classList.remove("progress-navigation-bar--0p"),document.getElementById("uncertainStatusBar").classList.add("progress-navigation-bar--33p"))):t.includes("Third")&&e.classList.contains("slide--show")&&(document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--completed")||document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--completed"),document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--active")&&document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("UncertainThirdSlideItem").classList.contains("list-navigation__bullet--disabled")&&document.getElementById("UncertainThirdSlideItem").classList.toggle("list-navigation__bullet--disabled"),document.getElementById("UncertainThirdSlideItem").classList.contains("list-navigation__bullet--active")||document.getElementById("UncertainThirdSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("uncertainStatusBar").classList.contains("progress-navigation-bar--33p")&&(document.getElementById("uncertainStatusBar").classList.remove("progress-navigation-bar--33p"),document.getElementById("uncertainStatusBar").classList.add("progress-navigation-bar--95p")))})}allDataHeader.forEach(function(e){var t=document.createElement("li");t.classList.add("list-navigation__bullet");var n=document.createElement("span");n.classList.add("bullet-title"),n.textContent=e,t.append(n);var i="";switch(listItemUncertainCounter){case 1:i="First";break;case 2:i="Second";break;case 3:i="Third";break;case 4:i="Fourth";break;case 5:i="Fifth"}t.id="Uncertain".concat(i,"SlideItem"),listItemUncertainCounter++,uncertainFormNavigation.append(t)});var allNextUncertainBtns=document.querySelectorAll(".btn-uncertain--next");allNextUncertainBtns.forEach(function(i){i.addEventListener("click",function(){var e=i.getAttribute("id"),t="";switch(e=e.replace("Next","")){case"SecondSlide":t="FirstSlide";break;case"ThirdSlide":t="SecondSlide"}var n=document.getElementById(t),e=document.getElementById(e);n.classList.toggle("slide--show"),n.classList.toggle("slide--hidden"),e.classList.toggle("slide--show"),e.classList.toggle("slide--hidden"),checkWhatSlideIsShowedInUncertainForm()})});var allPreviousUncertainBtns=document.querySelectorAll(".btn-uncertain--previous");allPreviousUncertainBtns.forEach(function(i){i.addEventListener("click",function(){var e=i.getAttribute("id"),t="";switch(e=e.replace("Previous","")){case"FirstSlide":t="SecondSlide";break;case"SecondSlide":t="ThirdSlide"}var n=document.getElementById(t),e=document.getElementById(e);n.classList.toggle("slide--show"),n.classList.toggle("slide--hidden"),e.classList.toggle("slide--show"),e.classList.toggle("slide--hidden")})}),checkWhatSlideIsShowedInUncertainForm();var userNameInput=document.getElementById("userName"),userPhoneInput=document.getElementById("userPhone");$(document).ready(function(){$(".submit-button").addClass("submit-button--disabled"),$("#userName").keyup(function(){console.log("yes"),0!=$(this).val().length&&0!=$("#userPhone").val().length&&$(".submit-button").removeClass("submit-button--disabled")}),$("#userPhone").keyup(function(){console.log("yes"),0!=$(this).val().length&&0!=$("#userName").val().length&&$(".submit-button").removeClass("submit-button--disabled")})}),$("#userPhone").inputmask();var menu=[],HeadersArray=document.querySelectorAll(".attention-container__header");HeadersArray.forEach(function(e){e=e.getAttribute("data-info");menu.push(e)});var swiperGreet=new Swiper("#greetingSwipper",{pagination:{el:".swiper-pagination",clickable:!0,renderBullet:function(e,t){return'\n            <div class = "'.concat(t,' bullet-special">\n                <div class ="bullet-header">').concat(menu[e],'</div>\n                <div class = ""></div>\n            </div>\n            ')}},loop:!0,effect:"fade",speed:800,watchSlidesProgress:!0,watchVisibility:!0,disableOnInteraction:!0}),swiperBanks=new Swiper("#banksSwiper",{loop:!0,effect:"cards",speed:800,slidesPerView:4,autoplay:{delay:1},spaceBetween:50,disableOnInteraction:!1,breakpoints:{920:{slidesPerView:4},600:{slidesPerView:2},450:{slidesPerView:1}}});$(document).ready(function(){$("#sliderDebt").slider({range:"min",animate:!0,value:4e5,min:1e5,max:5e6,slide:function(e,t){var n=$("#sliderDebt").slider("value"),i=$("#sliderDeposit").slider("value");"05"===(l=_toConsumableArray(document.querySelectorAll(".controller-input")).filter(function(e){if(e.checked)return e})[0].id.replace("month",""))&&(l=.5);var a=.00325,l=parseInt(l),n=parseInt(n),l=(n-=i=parseInt(i))*a*Math.floor(Math.pow(1+a,l)/(Math.pow(1+a,l)-1));$,$("#depositHalf").text(Math.floor(.8*n/2)),$("#depositMax").text(Math.floor(.8*n));n=parseInt($("#depositMax").text());$("#sliderDeposit").slider("option","max",n),$("#interestResult").text(Math.floor(l)+" ₽")}}),$("#sliderDeposit").slider({range:"min",animate:!0,value:4e4,min:0,max:8e4,slide:function(e,t){var n=$("#sliderDebt").slider("value"),i=$("#sliderDeposit").slider("value");"05"===(l=_toConsumableArray(document.querySelectorAll(".controller-input")).filter(function(e){if(e.checked)return e})[0].id.replace("month",""))&&(l=.5);var a=.00325,l=parseInt(l),n=parseInt(n);n-=i=parseInt(i);l=Math.floor(n*a*(Math.pow(1+a,l)/(Math.pow(1+a,l)-1)));$("#interestResult").text(Math.floor(l)+" ₽")}})}),function(t){var e,n,i,a;function l(e,t){var n,i;1<e.originalEvent.touches.length||(e.preventDefault(),n=e.originalEvent.changedTouches[0],(i=document.createEvent("MouseEvents")).initMouseEvent(t,!0,!0,window,1,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(i))}t.support.touch="ontouchend"in document,t.support.touch&&(e=t.ui.mouse.prototype,n=e._mouseInit,i=e._mouseDestroy,e._touchStart=function(e){!a&&this._mouseCapture(e.originalEvent.changedTouches[0])&&(a=!0,this._touchMoved=!1,l(e,"mouseover"),l(e,"mousemove"),l(e,"mousedown"))},e._touchMove=function(e){a&&(this._touchMoved=!0,l(e,"mousemove"))},e._touchEnd=function(e){a&&(l(e,"mouseup"),l(e,"mouseout"),this._touchMoved||l(e,"click"),a=!1)},e._mouseInit=function(){var e=this;e.element.bind({touchstart:t.proxy(e,"_touchStart"),touchmove:t.proxy(e,"_touchMove"),touchend:t.proxy(e,"_touchEnd")}),n.call(e)},e._mouseDestroy=function(){var e=this;e.element.unbind({touchstart:t.proxy(e,"_touchStart"),touchmove:t.proxy(e,"_touchMove"),touchend:t.proxy(e,"_touchEnd")}),i.call(e)})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
