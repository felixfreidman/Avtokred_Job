"use strict";function numberWithCommas(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")}var allUncertainSlides=document.querySelectorAll(".uncertain-form__slide"),allUncertainSlidesHeaders=document.querySelectorAll(".slide__header--uncertain"),allDataHeader=[];allUncertainSlidesHeaders.forEach(function(e){e=e.getAttribute("data-slide-header-uncertain");allDataHeader.push(e)});var uncertainFormNavigation=document.getElementById("uncertainNavigation"),listItemUncertainCounter=1;function checkWhatSlideIsShowedInUncertainForm(){allUncertainSlides.forEach(function(e){var t=e.getAttribute("id");t.includes("First")&&e.classList.contains("slide--show")?(document.getElementById("UncertainFirstSlideItem").classList.contains("list-navigation__bullet--active")||document.getElementById("UncertainFirstSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--disabled")||document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--disabled"),document.getElementById("UncertainThirdSlideItem").classList.contains("list-navigation__bullet--disabled")||document.getElementById("UncertainThirdSlideItem").classList.toggle("list-navigation__bullet--disabled")):t.includes("Second")&&e.classList.contains("slide--show")?(document.getElementById("UncertainFirstSlideItem").classList.contains("list-navigation__bullet--completed")||document.getElementById("UncertainFirstSlideItem").classList.toggle("list-navigation__bullet--completed"),document.getElementById("UncertainFirstSlideItem").classList.contains("list-navigation__bullet--active")&&document.getElementById("UncertainFirstSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--disabled")&&document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--disabled"),document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--active")||document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("uncertainStatusBar").classList.contains("progress-navigation-bar--33p")||(document.getElementById("uncertainStatusBar").classList.remove("progress-navigation-bar--0p"),document.getElementById("uncertainStatusBar").classList.add("progress-navigation-bar--33p"))):t.includes("Third")&&e.classList.contains("slide--show")&&(document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--completed")||document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--completed"),document.getElementById("UncertainSecondSlideItem").classList.contains("list-navigation__bullet--active")&&document.getElementById("UncertainSecondSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("UncertainThirdSlideItem").classList.contains("list-navigation__bullet--disabled")&&document.getElementById("UncertainThirdSlideItem").classList.toggle("list-navigation__bullet--disabled"),document.getElementById("UncertainThirdSlideItem").classList.contains("list-navigation__bullet--active")||document.getElementById("UncertainThirdSlideItem").classList.toggle("list-navigation__bullet--active"),document.getElementById("uncertainStatusBar").classList.contains("progress-navigation-bar--33p")&&(document.getElementById("uncertainStatusBar").classList.remove("progress-navigation-bar--33p"),document.getElementById("uncertainStatusBar").classList.add("progress-navigation-bar--95p")))})}allDataHeader.forEach(function(e){var t=document.createElement("li");t.classList.add("list-navigation__bullet");var n=document.createElement("span");n.classList.add("bullet-title"),n.textContent=e,t.append(n);var i="";switch(listItemUncertainCounter){case 1:i="First";break;case 2:i="Second";break;case 3:i="Third";break;case 4:i="Fourth";break;case 5:i="Fifth"}t.id="Uncertain".concat(i,"SlideItem"),listItemUncertainCounter++,uncertainFormNavigation.append(t)});var allNextUncertainBtns=document.querySelectorAll(".btn-uncertain--next");allNextUncertainBtns.forEach(function(i){i.addEventListener("click",function(){var e=i.getAttribute("id"),t="";switch(e=e.replace("Next","")){case"SecondSlide":t="FirstSlide";break;case"ThirdSlide":t="SecondSlide"}var n=document.getElementById(t),e=document.getElementById(e);n.classList.toggle("slide--show"),n.classList.toggle("slide--hidden"),e.classList.toggle("slide--show"),e.classList.toggle("slide--hidden"),checkWhatSlideIsShowedInUncertainForm()})});var allPreviousUncertainBtns=document.querySelectorAll(".btn-uncertain--previous");allPreviousUncertainBtns.forEach(function(i){i.addEventListener("click",function(){var e=i.getAttribute("id"),t="";switch(e=e.replace("Previous","")){case"FirstSlide":t="SecondSlide";break;case"SecondSlide":t="ThirdSlide"}var n=document.getElementById(t),e=document.getElementById(e);n.classList.toggle("slide--show"),n.classList.toggle("slide--hidden"),e.classList.toggle("slide--show"),e.classList.toggle("slide--hidden")})}),checkWhatSlideIsShowedInUncertainForm();var userNameInput=document.getElementById("userName"),userPhoneInput=document.getElementById("userPhone");$(document).ready(function(){$(".submit-button").addClass("submit-button--disabled"),$("#userName").keyup(function(){console.log("yes"),0!=$(this).val().length&&0!=$("#userPhone").val().length&&$(".submit-button").removeClass("submit-button--disabled")}),$("#userPhone").keyup(function(){console.log("yes"),0!=$(this).val().length&&0!=$("#userName").val().length&&$(".submit-button").removeClass("submit-button--disabled")})}),$("#userPhone").inputmask();var menu=[],HeadersArray=document.querySelectorAll(".attention-container__header");HeadersArray.forEach(function(e){e=e.getAttribute("data-info");menu.push(e)});var swiperGreet=new Swiper("#greetingSwipper",{pagination:{el:".swiper-pagination",clickable:!0,renderBullet:function(e,t){return'\n            <div class = "'.concat(t,' bullet-special">\n                <div class ="bullet-header">').concat(menu[e],'</div>\n                <div class = ""></div>\n            </div>\n            ')}},loop:!0,effect:"fade",speed:800,watchSlidesProgress:!0,watchVisibility:!0,disableOnInteraction:!0});$(document).ready(function(){$("#sliderDebt").slider({range:"min",animate:!0,value:5e5,min:1e5,max:435e4,step:1e3,slide:function(e,t){t=numberWithCommas(t=t.value);$("#debtInput").val(t)}}),$("#debtInput").val($("#sliderDebt").slider("option","value")),$("#debtInput").change(function(){$("#sliderDebt").slider("value",$(this).val())}),$("#sliderTime").slider({range:"min",animate:!0,value:3,min:1,max:8,step:1,slide:function(e,t){var n=t.value;switch(n){case 1:n="".concat(n," год");break;case 2:case 3:case 4:n="".concat(n," года");break;default:n="".concat(n," лет")}$("#timeInput").val(n)}}),$("#timeInput").val($("#sliderTime").slider("option","value"));var e=$("#timeInput").val(),e="".concat(e," года");$("#timeInput").val(e),$("#timeInput").change(function(){$("#sliderTime").slider("value",$(this).val())}),$("#sliderIncome").slider({range:"min",animate:!0,value:3e4,min:1e4,max:5e5,step:5e3,slide:function(e,t){t=numberWithCommas(t=t.value);$("#incomeInput").val(t)}}),$("#incomeInput").val($("#sliderIncome").slider("option","value")),$("#incomeInput").change(function(){$("#sliderIncome").slider("value",$(this).val())}),$("#sliderInvest").slider({range:"min",animate:!0,value:1e5,min:0,max:4e5,step:1e3,slide:function(e,t){t=numberWithCommas(t=t.value);$("#investInput").val(t)}}),$("#investInput").val($("#sliderInvest").slider("option","value")),$("#investInput").change(function(){$("#sliderInvest").slider("value",$(this).val())})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
